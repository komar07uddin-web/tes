-- =========================================================================
-- FishItHub v3.5 Ultimate GUI Safe Version
-- All features integrated, safe remote calls with auto logging
-- =========================================================================

-- ====== Services ======
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- ====== Debug Helpers ======
local function dbg(...) print("[FishItHub]", ...) end
local function warnDbg(...) warn("[FishItHub]", ...) end

-- ====== Safe Remote Wrapper ======
local function safeCall(remoteType, remoteName, ...)
    local function findRemoteAny(name)
        local net = ReplicatedStorage:FindFirstChild("Packages")
        if net then
            local idx = net:FindFirstChild("_Index")
            if idx then
                for _,v in ipairs(idx:GetChildren()) do
                    if type(v.Name)=="string" and string.find(v.Name,"sleitnick_net") then
                        local netObj = v:FindFirstChild("net")
                        if netObj then
                            local rf = netObj:FindFirstChild("RF") or netObj
                            local re = netObj:FindFirstChild("RE") or netObj
                            for _, container in ipairs({rf,re}) do
                                local r = container:FindFirstChild(name)
                                if r then return r end
                            end
                            for _,v2 in ipairs(netObj:GetDescendants()) do
                                if (v2:IsA("RemoteEvent") or v2:IsA("RemoteFunction")) and v2.Name:lower():find(name:lower()) then
                                    return v2
                                end
                            end
                        end
                    end
                end
            end
        end
        return nil
    end

    local remote = findRemoteAny(remoteName)
    if not remote then
        warnDbg(remoteType.." '"..remoteName.."' not found")
        return false,"remote nil"
    end

    local ok,res = pcall(function()
        if remoteType=="Invoke" then return remote:InvokeServer(...) end
        return remote:FireServer(...)
    end)
    if ok then dbg(remoteType.." call succeeded:", remoteName) else warnDbg(remoteType.." call failed:", remoteName,res) end
    return ok,res
end

-- ====== Settings ======
local settings = {
    autoFish=false,
    catchMode="Perfect",
    smartTiming=true,
    autoSellWhenFull=true,
    sellThreshold=5000,
    protectRarities={secret=true,mythic=true,legendary=true},
    autoReturnAfterSell=true,
    antiAFK=true,
    safeMode=false,
    heartbeatTimeout=12,
    rareAlertEnabled=true,
}

local CATCH_TIMINGS = {Perfect=0.85,Amazing=0.6,Good=0.35,Fast=0.15}

-- ====== State ======
local state = {running=false,lastActivity=tick(),fishingThread=nil,heartbeatThread=nil,savedFishingSpot=nil,lastSellSummary=nil,minigameActive=false,lastMinigameTs=0}
local function updateActivity() state.lastActivity=tick() end

-- ====== Inventory Helpers ======
local function getInventory()
    local ok,res = safeCall("Invoke","GetInventory")
    if ok and type(res)=="table" then return res end
    return nil
end

local function getInventoryCount()
    local inv = getInventory()
    if not inv then return nil end
    local count=0
    for _,item in ipairs(inv) do count = count + (item.count or 1) end
    return count
end

local function isRareByNameOrRarity(item)
    if not item then return false end
    if type(item)=="table" then
        local r=(item.rarity or ""):lower()
        if settings.protectRarities[r] then return true end
        local name=(item.name or ""):lower()
        if name:find("secret") or name:find("mythic") or name:find("legend") then return true end
    elseif type(item)=="string" then
        local n=item:lower()
        if n:find("secret") or n:find("mythic") or n:find("legendary") then return true end
    end
    return false
end

local function rareAlert(item)
    if not settings.rareAlertEnabled then return end
    dbg("üî• Rare catch detected:", item and (type(item)=="table" and (item.name or "item") or tostring(item)))
    safeCall("Fire","DisplaySystemMessage","Rare catch detected! Check inventory",{duration=5})
end

-- ====== Fishing Core ======
local function attemptCastAndCatchCycle()
    updateActivity()
    safeCall("Fire","EquipToolFromHotbar",1)
    if settings.safeMode then wait(1.0) else wait(0.45) end
    safeCall("Invoke","ChargeFishingRod",Workspace:GetServerTimeNow())
    local offset = CATCH_TIMINGS[settings.catchMode] or 0.6
    if settings.smartTiming and state.minigameActive then
        local elapsed = tick() - state.lastMinigameTs
        if elapsed < 5 then wait(math.max(0.05,offset-(elapsed*0.2))) else wait(offset) end
    else wait(offset) end
    safeCall("Invoke","RequestFishingMinigameStarted",-1.2379,1)
    wait(offset)
    local ok,res = safeCall("Fire","FishingCompleted")
    if ok and res and isRareByNameOrRarity(res) then rareAlert(res) end
    updateActivity()
end

local function startAutoFishing()
    if state.fishingThread then return end
    state.running=true
    state.fishingThread=spawn(function()
        dbg("AutoFishing thread started")
        while state.running and settings.autoFish do
            pcall(attemptCastAndCatchCycle)
            if settings.safeMode then wait(2.5) else wait(1.8) end
        end
        dbg("AutoFishing thread ended")
        state.fishingThread=nil
    end)
end

local function stopAutoFishing()
    state.running=false
    settings.autoFish=false
    dbg("Stop requested for AutoFishing")
end

-- ====== Auto Sell ======
local function doSellAllBestEffort()
    local inv=getInventory()
    if inv then
        local sellCandidates={}
        for _,item in ipairs(inv) do
            local r=(item.rarity or ""):lower()
            if not settings.protectRarities[r] then table.insert(sellCandidates,item) end
        end
        if #sellCandidates==0 then dbg("No sellable items") return false,"none" end
        local soldCount,earned=0,0
        for _,it in ipairs(sellCandidates) do
            local ok,res = safeCall("Invoke","SellItem",it.id or it.name or it)
            if ok then soldCount=soldCount+(it.count or 1); earned=earned+(res and (res.amount or 0) or 0) end
            wait(0.15)
        end
        state.lastSellSummary={count=soldCount,earned=earned}
        dbg("Sold per-item:",soldCount,earned)
        return true,state.lastSellSummary
    else
        warnDbg("Inventory not found, auto-sell skipped")
        return false,"no-inventory"
    end
end

local function autoSellWatcher()
    spawn(function()
        while true do
            if settings.autoSellWhenFull then
                local count=getInventoryCount()
                if count and count>=settings.sellThreshold then
                    dbg("Inventory threshold reached:",count)
                    doSellAllBestEffort()
                    if settings.autoReturnAfterSell and state.savedFishingSpot then
                        local char = workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild(LocalPlayer.Name)
                        if char and char:FindFirstChild("HumanoidRootPart") then
                            char.HumanoidRootPart.CFrame=state.savedFishingSpot
                            dbg("Returned to saved fishing spot after sell")
                        end
                    end
                end
            end
            wait(5)
        end
    end)
end

-- ====== GUI ======
local Main = ProjectMadara:Window({ Title = "FishItHub v3.5 Ultimate" })

-- --- Fishing Tab ---
local T_fish = Main:Tab({ Name = "Fishing" })
T_fish:Toggle({ Name = "Auto Cast & Catch", Default = false, Callback = function(v)
    settings.autoFish=v
    dbg("AutoFish set ->",v)
    if v then startAutoFishing() end
end})
T_fish:Dropdown({ Name = "Catch Mode", Default = "Perfect", Options = {"Perfect","Amazing","Good","Fast"}, Callback = function(opt)
    settings.catchMode=opt
end})
T_fish:Toggle({ Name = "Smart Timing", Default=true, Callback=function(v) settings.smartTiming=v end })
T_fish:Toggle({ Name = "Safe Mode", Default=false, Callback=function(v) settings.safeMode=v end })
T_fish:Button({ Name = "Stop AutoFishing", Callback=stopAutoFishing })
T_fish:Button({ Name = "Save Current Spot", Callback=function()
    local char=workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild(LocalPlayer.Name)
    if char and char:FindFirstChild("HumanoidRootPart") then state.savedFishingSpot=char.HumanoidRootPart.CFrame; dbg("Saved spot") end
end})
T_fish:Button({ Name = "Teleport to Saved Spot", Callback=function()
    if not state.savedFishingSpot then warnDbg("No saved spot") return end
    local char=workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild(LocalPlayer.Name)
    if char and char:FindFirstChild("HumanoidRootPart") then char.HumanoidRootPart.CFrame=state.savedFishingSpot; dbg("Teleported to saved spot") end
end})

-- --- Sell Tab ---
local T_sell = Main:Tab({ Name = "Sell" })
T_sell:Toggle({ Name = "Auto Sell When Full", Default=true, Callback=function(v) settings.autoSellWhenFull=v end })
T_sell:Button({ Name = "Manual Sell Now", Callback=function() doSellAllBestEffort() end })
T_sell:Toggle({ Name = "Return to Spot After Sell", Default=true, Callback=function(v) settings.autoReturnAfterSell=v end })
T_sell:Toggle({ Name = "Protect Secret/Mythic/Legendary", Default=true, Callback=function(v)
    settings.protectRarities.secret=v; settings.protectRarities.mythic=v; settings.protectRarities.legendary=v
end})

-- --- Travel Tab ---
local T_travel = Main:Tab({ Name = "Travel" })
T_travel:Label("üìç Teleports require scanning")
T_travel:Button({ Name = "Scan World", Callback=function()
    dbg("Scan world for NPCs/Islands... (not implemented demo)")
end})

-- --- Settings Tab ---
local T_settings = Main:Tab({ Name = "Settings" })
T_settings:Toggle({ Name = "Anti-AFK", Default=true, Callback=function(v) settings.antiAFK=v end })
T_settings:Toggle({ Name = "Safe Mode", Default=false, Callback=function(v) settings.safeMode=v end })
T_settings:Slider({ Name = "Heartbeat Timeout (s)", Min=6, Max=30, Default=settings.heartbeatTimeout, Callback=function(v) settings.heartbeatTimeout=v end })

-- --- Debug Tab ---
local T_debug = Main:Tab({ Name = "Debug" })
T_debug:Button({ Name = "Show Last Sell Summary", Callback=function() dbg("Last Sell Summary:",state.lastSellSummary) end })

-- ====== Start Services ======
if settings.antiAFK then
    pcall(function()
        LocalPlayer.Idled:Connect(function()
            local vu = game:GetService("VirtualUser")
            if vu then vu:CaptureController(); vu:ClickButton2(Vector2.new(0,0)) end
        end)
    end)
end
autoSellWatcher()
dbg("FishItHub v3.5 Ultimate GUI Safe Loaded")
