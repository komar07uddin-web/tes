--// üêü FishItHub v3.5 - Debug Edition
--// Developer: ChatGPT x Komar
--// Fully logged version to trace initialization & runtime issues

print("[FishItHub] üöÄ Initializing...")

local function log(level, msg)
    print(string.format("[FishItHub] [%s] %s", level, msg))
end

--// üîπ Step 1: Load External Library
local ProjectMadara
local success, err = pcall(function()
    log("INFO", "Fetching external UI library...")
    local src = game:HttpGet("https://raw.githubusercontent.com/idonthaveoneatm/Libraries/normal/quake/src")
    ProjectMadara = loadstring(src)()
end)

if not success then
    log("ERROR", "Failed to load ProjectMadara library: " .. tostring(err))
    return
elseif not ProjectMadara then
    log("ERROR", "ProjectMadara returned nil! Possibly failed loadstring or rate limited")
    return
end

log("SUCCESS", "ProjectMadara UI loaded successfully")

--// üîπ Step 2: Setup Main Window
local Main
success, err = pcall(function()
    Main = ProjectMadara:Window({Title = "FishItHub v3.5 | Debug Mode"})
end)

if not success or not Main then
    log("ERROR", "Failed to create main window: " .. tostring(err))
    return
end
log("SUCCESS", "Main window initialized")

--// üîπ Step 3: Create Tabs
local FishingTab = Main:Tab({Name = "üé£ Fishing", tabColor = Color3.fromHex("#3CB371")})
local SellTab = Main:Tab({Name = "üí∞ Sell", tabColor = Color3.fromHex("#FFD700")})
local TravelTab = Main:Tab({Name = "üó∫Ô∏è Travel", tabColor = Color3.fromHex("#1E90FF")})
local SettingsTab = Main:Tab({Name = "‚öôÔ∏è Settings", tabColor = Color3.fromHex("#808080")})
local DebugTab = Main:Tab({Name = "üêû Debug", tabColor = Color3.fromHex("#FF4500")})

log("SUCCESS", "All tabs created successfully")

--// üîπ Step 4: Validate Remote Structure
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local netPath = ReplicatedStorage:FindFirstChild("Packages")
if not netPath then
    log("ERROR", "ReplicatedStorage.Packages not found")
    return
end

local net
success, err = pcall(function()
    net = netPath._Index["sleitnick_net@0.2.0"].net
end)

if not success or not net then
    log("ERROR", "Failed to locate Net folder: " .. tostring(err))
    return
end
log("SUCCESS", "Net structure verified")

--// üîπ Step 5: Fishing Logic
local autoFish = false
local savedSpot = nil
local LocalPlayer = game:GetService("Players").LocalPlayer

local function castRod()
    log("INFO", "Casting fishing rod...")
    pcall(function()
        local REEquip = net["RE/EquipToolFromHotbar"]
        REEquip:FireServer(1)
        task.wait(0.5)
        local RFCharge = net["RF/ChargeFishingRod"]
        RFCharge:InvokeServer(workspace:GetServerTimeNow())
        task.wait(0.1)
        local RFMinigame = net["RF/RequestFishingMinigameStarted"]
        RFMinigame:InvokeServer(-1.2, 1)
    end)
end

local function completeFishing()
    pcall(function()
        local REFishDone = net["RE/FishingCompleted"]
        REFishDone:FireServer()
    end)
    log("INFO", "Fishing completed ‚úÖ")
end

local function startAutoFishing()
    if autoFish then return end
    autoFish = true
    log("INFO", "AutoFishing thread started")
    task.spawn(function()
        while autoFish do
            castRod()
            task.wait(4)
            completeFishing()
            task.wait(2)
        end
        log("WARN", "AutoFishing stopped")
    end)
end

--// üîπ Step 6: Fishing Tab UI
FishingTab:Toggle({
    Name = "üé£ Auto Fish",
    Default = false,
    Callback = function(state)
        if state then
            startAutoFishing()
        else
            autoFish = false
        end
    end
})

FishingTab:Button({
    Name = "üìç Save Fishing Spot",
    Callback = function()
        local charFolder = workspace:FindFirstChild("Characters")
        local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
        if not char then return log("WARN", "Character not found") end
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return log("WARN", "HumanoidRootPart missing") end
        savedSpot = hrp.CFrame
        log("INFO", "Fishing spot saved at: " .. tostring(savedSpot))
    end
})

FishingTab:Button({
    Name = "üì¶ Teleport to Spot",
    Callback = function()
        if not savedSpot then return log("WARN", "No saved spot!") end
        local charFolder = workspace:FindFirstChild("Characters")
        local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
        if not char then return log("WARN", "Character not found") end
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return log("WARN", "HumanoidRootPart missing") end
        hrp.CFrame = savedSpot
        log("INFO", "Teleported back to fishing spot ‚úÖ")
    end
})

--// üîπ Debug Log UI
DebugTab:Label("Console Log will display every event.")
DebugTab:Button({
    Name = "üßπ Print Net Tree",
    Callback = function()
        for _, v in pairs(net:GetDescendants()) do
            if v:IsA("RemoteEvent") or v:IsA("RemoteFunction") then
                print("[Net] " .. v:GetFullName())
            end
        end
    end
})

log("SUCCESS", "FishItHub v3.5 fully initialized ‚úÖ")
print("[FishItHub] üêü Ready for action!")
