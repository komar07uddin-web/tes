print("[FishItHub] üîÑ Loading v5.1 - Fixed Auto/Semi Mode...")

-- ========== ENHANCED LOGGING SYSTEM ==========
local LOG_LEVELS = {DEBUG = 1, INFO = 2, WARN = 3, ERROR = 4, CRITICAL = 5}
local logHistory = {}
local MAX_LOG_HISTORY = 500
local currentLogLevel = LOG_LEVELS.DEBUG

local function addToHistory(level, category, message)
    table.insert(logHistory, {
        timestamp = tick(),
        level = level,
        category = category,
        message = message,
        time = os.date("%H:%M:%S")
    })
    if #logHistory > MAX_LOG_HISTORY then table.remove(logHistory, 1) end
end

local function safeConcat(...)
    local args = {...}
    local result = {}
    for i, v in ipairs(args) do
        table.insert(result, tostring(v))
    end
    return table.concat(result, " ")
end

local function log(level, category, ...)
    if level < currentLogLevel then return end
    local message = safeConcat(...)
    local prefix = "[FishItHub]["..category.."]"
    addToHistory(level, category, message)
    
    if level == LOG_LEVELS.DEBUG then print(prefix, "üîç", message)
    elseif level == LOG_LEVELS.INFO then print(prefix, "‚ÑπÔ∏è", message)
    elseif level == LOG_LEVELS.WARN then warn(prefix, "‚ö†Ô∏è", message)
    elseif level == LOG_LEVELS.ERROR then warn(prefix, "‚ùå", message)
    elseif level == LOG_LEVELS.CRITICAL then warn(prefix, "üî• CRITICAL:", message) end
end

local function logInfo(cat, ...) log(LOG_LEVELS.INFO, cat, ...) end
local function logWarn(cat, ...) log(LOG_LEVELS.WARN, cat, ...) end
local function logError(cat, ...) log(LOG_LEVELS.ERROR, cat, ...) end
local function logDebug(cat, ...) log(LOG_LEVELS.DEBUG, cat, ...) end

-- Performance Tracker
local perfTracker = {}
local function perfStart(name)
    perfTracker[name] = {start = tick(), count = (perfTracker[name] and perfTracker[name].count or 0) + 1}
end
local function perfEnd(name)
    if not perfTracker[name] then return end
    local elapsed = tick() - perfTracker[name].start
    perfTracker[name].lastDuration = elapsed
    perfTracker[name].totalTime = (perfTracker[name].totalTime or 0) + elapsed
    if elapsed > 5 then logWarn("PERF", name, "SLOW:", string.format("%.2f", elapsed).."s") end
    return elapsed
end

-- Statistics
local stats = {
    fishCaught = 0,
    rareCaught = 0,
    totalCycles = 0,
    errorCount = {fishing = 0, selling = 0, teleport = 0, init = 0},
    lastError = {},
    rareFish = {}
}

-- üß© Load Kavo UI Library
perfStart("LoadLibrary")
local Library
local success = pcall(function()
    Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
end)
perfEnd("LoadLibrary")

if not success or not Library then
    logError("INIT", "Failed to load Kavo library")
    return
end
logInfo("INIT", "‚úÖ Kavo UI Library loaded")

-- ü™ü Create GUI (Using Kavo)
local Window = Library.CreateLib("FishItHub v5.1 Fixed", "DarkTheme")

if not Window then
    logError("INIT", "Failed to create window")
    return
end

-- üóÇÔ∏è Create Tabs
local TabFishing = Window:NewTab("üé£ Fishing")
local TabSelling = Window:NewTab("üí∞ Selling")
local TabPlayer = Window:NewTab("üë§ Player")
local TabTravel = Window:NewTab("üó∫Ô∏è Travel")
local TabEvents = Window:NewTab("üé™ Events")
local TabSpoof = Window:NewTab("üé≠ Spoof")
local TabStability = Window:NewTab("üõ°Ô∏è Stability")
local TabDebug = Window:NewTab("üêõ Debug")

-- Create Sections
local FishingModeSection = TabFishing:NewSection("Fishing Mode Selection")
local FishingSection = TabFishing:NewSection("Auto Fishing (Full Auto)")
local SemiSection = TabFishing:NewSection("Semi Mode (Manual Minigame)")
local FishingControlSection = TabFishing:NewSection("Fishing Controls")
local SellSection = TabSelling:NewSection("Smart Selling")
local PlayerMovementSection = TabPlayer:NewSection("Movement")
local PlayerAbilitySection = TabPlayer:NewSection("Abilities")
local PlayerActionSection = TabPlayer:NewSection("Actions")
local NPCSection = TabTravel:NewSection("Fishing Merchants")
local IslandSection = TabTravel:NewSection("Island Teleports")
local PlayerTeleportSection = TabTravel:NewSection("Teleport to Player")
local EventSection = TabEvents:NewSection("Admin Events")
local SpoofSection = TabSpoof:NewSection("Equipment Spoof")
local StabilitySection = TabStability:NewSection("Stability & Safety")
local DebugSection = TabDebug:NewSection("Debug Console")

logInfo("GUI", "‚úÖ All tabs created")

-- üåê Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local StarterGui = game:GetService("StarterGui")

-- Find Remotes
local net

pcall(function()
    net = ReplicatedStorage:WaitForChild("Packages", 5)
        :WaitForChild("_Index", 5)
        :WaitForChild("sleitnick_net@0.2.0", 5)
        :WaitForChild("net", 5)
end)

if not net then
    local pk = ReplicatedStorage:FindFirstChild("Packages")
    if pk then
        local idx = pk:FindFirstChild("_Index")
        if idx then
            for _, v in ipairs(idx:GetChildren()) do
                if string.find(v.Name, "sleitnick_net") then
                    net = v:FindFirstChild("net")
                    if net then break end
                end
            end
        end
    end
end

if not net then
    logError("NET", "Cannot find net folder")
    return
end

logInfo("NET", "‚úÖ Found net folder")

-- üéØ Get Remotes
local function getRemote(name)
    local found = net:FindFirstChild(name, true)
    if found then logInfo("REMOTE", "‚úÖ", name)
    else logWarn("REMOTE", "‚ö†Ô∏è Missing:", name) end
    return found
end

local RF_Charge = getRemote("RF/ChargeFishingRod")
local RF_RequestMini = getRemote("RF/RequestFishingMinigameStarted")
local RE_Completed = getRemote("RE/FishingCompleted")
local RE_EquipTool = getRemote("RE/EquipToolFromHotbar")
local RF_SellAll = getRemote("RF/SellAllItems")
local RE_EquipRod = getRemote("RE/EquipItem")
local RE_EquipBait = getRemote("RE/EquipBait")
local RE_EquipRodSkin = getRemote("RE/EquipRodSkin")
local RE_FishCaught = getRemote("RE/FishCaught")

-- ========== FISH CATEGORIES DATABASE ==========
local FISH_DATABASE = {
    Secret = {
        "Crystal Crab", "Orca", "Megalodon", "Worm Fish", "Ghost Shark",
        "Lochness Monster", "Monster Shark", "Eerie Shark", "Armored Shark",
        "Great Whale", "Kraken", "Queen Crab", "Robot Kraken", "King Crab",
        "Giant Squid", "Panther Eel"
    },
    Mythic = {
        "Dotted Stingray", "Manta Ray", "Hammerhead Shark", "Swordfish Shark",
        "Loggerhead Turtle", "Prismy Seahorse", "Blueflame Ray", "Magma Shark",
        "Hawks Turtle", "Abyss Seahorse", "Brown Megalodon", "Thresher Shark",
        "Blob Fish"
    },
    Legendary = {
        "Lined Cardinal Fish", "Yellowfish Tuna", "Chrome Tuna", "Bumblebee Grouper",
        "Lobster", "Lavafin Tuna", "Starjam Tang", "Greenbee Grouper",
        "Blue Lobster", "Enchanted Angelfish", "Magic Tang", "Axolotl",
        "Deep Sea Crab"
    },
    Epic = {
        "Dorhey Tang", "Unicorn Tang", "Cow Clownfish", "Moorish Idol",
        "Sushi Cardinal", "Longnose Butterfly", "Firecoal Damsel", "Panther Grouper",
        "Domino Damsel", "Astra Damsel", "Pufferfish", "Vampire Squid",
        "Angler Fish"
    },
    Rare = {
        "Barracuda Fish", "Korean Angelfish", "Ballina Angelfish", "Frog",
        "Darwin Clownfish", "Jewel Tang", "Candy Butterfly", "Fire Goby",
        "Kau Cardinal", "Rockform Cardianl", "Volsail Tang", "White Clownfish",
        "Scissortail Dartfish", "Charmed Tang", "Catfish", "Sheepshead Fish",
        "Coney Fish", "Jellyfish"
    }
}

-- ========== STATE (FIXED SEPARATION) ==========
local state = {
    autoFishing = false,  -- ONLY for Full Auto Mode
    semiMode = false,     -- ONLY for Semi Mode
    tapSpeed = 100,       -- Only used in Semi Mode
    fishingDelay = {
        equip = 0.3,      -- Default: 0.3s (Perfect)
        charge = 0.5,     -- Default: 0.5s (Perfect)
        cast = 1.0,       -- Default: 1.0s (Perfect)
        bite = 3.0,       -- Default: 3.0s (Perfect)
        catch = 0.5,      -- Default: 0.5s (Perfect)
        rest = 1.5        -- Default: 1.5s (Perfect)
    },
    autoSell = false,
    antiAFK = false,
    filterRare = {
        Secret = false,
        Mythic = false,
        Legendary = false,
        Epic = false,
        Rare = false
    },
    fishingThread = nil,
    tapThread = nil,
    lastFishingSpot = nil,
    selectedPlayer = nil,
    spoofRod = "Ghostfinn Rod",
    spoofBait = "Singularity Bait",
    spoofSkin = "Default",
    enableSpoof = false,
    lastActivity = tick(),
    infiniteJump = false,
    infiniteJumpConnection = nil,
    radarEnabled = false,
    divingGearEnabled = false,
    divingGearConnection = nil,
    originalWalkSpeed = 16,
    originalJumpPower = 50,
    customWalkSpeed = 16,
    customJumpPower = 50
}

-- ========== RARE FISH DETECTION ==========
local function getFishTier(fishName)
    if not fishName then return nil end
    local fishStr = tostring(fishName)
    
    for tier, fishList in pairs(FISH_DATABASE) do
        for _, fish in ipairs(fishList) do
            if fishStr == fish or string.lower(fishStr) == string.lower(fish) then
                return tier
            end
        end
    end
    
    return nil
end

local function alertRareCatch(fishName, tier)
    stats.rareCaught = stats.rareCaught + 1
    table.insert(stats.rareFish, {name = fishName, tier = tier, time = os.date("%H:%M:%S")})
    logInfo("RARE", "üåüüåüüåü RARE CATCH:", fishName, "["..tier.."]", "üåüüåüüåü")
    
    StarterGui:SetCore("SendNotification", {
        Title = "üåü RARE FISH!",
        Text = fishName .. " [" .. tier .. "]",
        Duration = 5
    })
end

-- ========== ROD/BAIT/SKIN SPOOF SYSTEM ==========
local function applyFullSpoof()
    if not state.enableSpoof then return end
    
    logInfo("SPOOF", "üé≠ Applying full equipment spoof...")
    
    local rodSuccess = pcall(function()
        if RE_EquipRod then
            RE_EquipRod:FireServer(state.spoofRod)
            logInfo("SPOOF", "‚úÖ Rod equipped:", state.spoofRod)
        end
    end)
    
    if not rodSuccess then logError("SPOOF", "Failed to equip rod") end
    task.wait(0.15)
    
    local baitSuccess = pcall(function()
        if RE_EquipBait then
            RE_EquipBait:FireServer(state.spoofBait)
            logInfo("SPOOF", "‚úÖ Bait equipped:", state.spoofBait)
        end
    end)
    
    if not baitSuccess then logError("SPOOF", "Failed to equip bait") end
    task.wait(0.15)
    
    if state.spoofSkin ~= "Default" then
        local skinSuccess = pcall(function()
            if RE_EquipRodSkin then
                RE_EquipRodSkin:FireServer(state.spoofSkin)
                logInfo("SPOOF", "‚úÖ Skin equipped:", state.spoofSkin)
            end
        end)
        
        if not skinSuccess then logError("SPOOF", "Failed to equip skin") end
        task.wait(0.15)
    end
    
    logInfo("SPOOF", "‚úÖ All equipment spoofed successfully!")
end

-- ========== AUTO TAP SYSTEM (ONLY FOR SEMI MODE) ==========
local function stopAutoTap()
    if state.tapThread then
        task.cancel(state.tapThread)
        state.tapThread = nil
        logInfo("TAP", "üõë Auto tap stopped")
    end
end

local function startAutoTap()
    stopAutoTap()
    
    if not state.semiMode then 
        logDebug("TAP", "Semi mode not active, skipping tap")
        return 
    end
    
    logInfo("TAP", "üñ±Ô∏è Starting auto tap with speed:", state.tapSpeed, "ms")
    
    state.tapThread = task.spawn(function()
        while state.semiMode do
            local success = pcall(function()
                local screenSize = workspace.CurrentCamera.ViewportSize
                local x = screenSize.X / 2
                local y = screenSize.Y / 2
                
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 0)
                task.wait(0.02)
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 0)
            end)
            
            if not success then
                logError("TAP", "Tap failed, retrying...")
            end
            
            task.wait(state.tapSpeed / 1000)
        end
        
        state.tapThread = nil
        logInfo("TAP", "üõë Auto tap loop ended")
    end)
end

-- ========== UNSTUCK FISHING + RESTART (COMBINED) ==========
local function unstuckAndRestart()
    logInfo("UNSTUCK", "üîß Executing DEEP unstuck + restart sequence...")
    
    -- Stop all fishing activities
    local wasAutoFishing = state.autoFishing
    local wasSemiMode = state.semiMode
    state.autoFishing = false
    state.semiMode = false
    stopAutoTap()
    task.wait(0.3)
    
    local player = Players.LocalPlayer
    if not player or not player.Character then 
        logError("UNSTUCK", "Character not found")
        return 
    end
    
    pcall(function()
        local character = player.Character
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local hrp = character:FindFirstChild("HumanoidRootPart")
        
        -- Step 1: Force unequip ALL tools
        logInfo("UNSTUCK", "Step 1: Unequipping all tools...")
        for i = 1, 3 do
            if humanoid then
                humanoid:UnequipTools()
            end
            
            for _, tool in ipairs(character:GetChildren()) do
                if tool:IsA("Tool") then
                    tool.Parent = player.Backpack
                end
            end
            task.wait(0.1)
        end
        
        -- Step 2: Destroy fishing tools
        logInfo("UNSTUCK", "Step 2: Removing fishing tools...")
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            if tool:IsA("Tool") then
                local toolName = string.lower(tool.Name)
                if string.find(toolName, "rod") or string.find(toolName, "fish") then
                    pcall(function()
                        tool.Parent = nil
                    end)
                end
            end
        end
        task.wait(0.2)
        
        -- Step 3: Stop ALL animations
        logInfo("UNSTUCK", "Step 3: Stopping animations...")
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                    track:Stop(0)
                    track:Destroy()
                end
            end
            
            -- Force normal movement state
            humanoid:ChangeState(Enum.HumanoidStateType.Landed)
            task.wait(0.05)
            humanoid:ChangeState(Enum.HumanoidStateType.Running)
            task.wait(0.05)
            humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
            task.wait(0.05)
            humanoid:ChangeState(Enum.HumanoidStateType.Landed)
        end
        
        task.wait(0.2)
        
        -- Step 4: Clear fishing UI
        logInfo("UNSTUCK", "Step 4: Clearing fishing UI...")
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            for _, gui in ipairs(playerGui:GetChildren()) do
                local guiNameLower = string.lower(gui.Name)
                if string.find(guiNameLower, "fish") or 
                   string.find(guiNameLower, "minigame") or
                   string.find(guiNameLower, "rod") or
                   string.find(guiNameLower, "cast") or
                   string.find(guiNameLower, "bite") then
                    pcall(function()
                        for _, desc in ipairs(gui:GetDescendants()) do
                            if desc:IsA("GuiObject") then
                                desc.Visible = false
                            end
                        end
                        gui.Enabled = false
                        gui:Destroy()
                    end)
                end
            end
        end
        
        task.wait(0.3)
        
        -- Step 5: Reset position
        logInfo("UNSTUCK", "Step 5: Resetting position...")
        if hrp then
            local currentPos = hrp.CFrame
            hrp.CFrame = currentPos + Vector3.new(0, 5, 0)
            task.wait(0.1)
            hrp.CFrame = currentPos
        end
        
        task.wait(0.2)
        
        -- Step 6: Reset physics
        logInfo("UNSTUCK", "Step 6: Resetting physics...")
        if hrp then
            hrp.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            hrp.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
        end
        
        task.wait(0.5)
        
        logInfo("UNSTUCK", "‚úÖ Unstuck complete! Restarting fishing...")
        
        StarterGui:SetCore("SendNotification", {
            Title = "‚úÖ Unstuck & Restart",
            Text = "All fishing cleared! Restarting...",
            Duration = 4
        })
        
        -- Restore fishing mode
        task.wait(1)
        if wasAutoFishing then
            state.autoFishing = true
            startAutoFishing()
        elseif wasSemiMode then
            state.semiMode = true
            startSemiMode()
        end
    end)
end

-- ========== FULL AUTO FISHING (NO TAP) ==========
local function startAutoFishing()
    if state.fishingThread then 
        logWarn("FISHING", "Already running")
        return 
    end
    
    logInfo("FISHING", "ü§ñ Starting FULL AUTO Mode (Instant)")
    
    if state.enableSpoof then
        applyFullSpoof()
    end
    
    state.fishingThread = task.spawn(function()
        local cycleCount = 0
        
        while state.autoFishing do
            cycleCount = cycleCount + 1
            stats.totalCycles = cycleCount
            perfStart("AutoCycle_"..cycleCount)
            
            logInfo("FISHING", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ AUTO Cycle #"..cycleCount.." START ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            
            local ok, err = pcall(function()
                local d = state.fishingDelay
                
                -- Save position
                local player = Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    state.lastFishingSpot = player.Character.HumanoidRootPart.CFrame
                end
                
                -- Step 1: Equip Rod
                logInfo("FISHING", "‚öôÔ∏è Equipping rod... ("..d.equip.."s)")
                if RE_EquipTool then
                    RE_EquipTool:FireServer(1)
                    task.wait(d.equip)
                end

                -- Step 2: Charge Rod
                logInfo("FISHING", "‚ö° Charging rod... ("..d.charge.."s)")
                if RF_Charge then
                    pcall(function()
                        RF_Charge:InvokeServer(workspace:GetServerTimeNow())
                    end)
                    task.wait(d.charge)
                end

                -- Step 3: Cast
                logInfo("FISHING", "üéØ Casting line... ("..d.cast.."s)")
                task.wait(d.cast)
                
                -- Step 4: AUTO COMPLETE (No Tap)
                logInfo("FISHING", "ü§ñ AUTO completing minigame... ("..d.bite.."s)")
                if RF_RequestMini then
                    pcall(function()
                        RF_RequestMini:InvokeServer(-1.2, 1)
                    end)
                end
                task.wait(d.bite)
                logInfo("FISHING", "‚úÖ Minigame completed (Auto)")

                -- Step 5: Complete Catch
                logInfo("FISHING", "‚ú® Completing catch... ("..d.catch.."s)")
                if RE_Completed then
                    pcall(function()
                        RE_Completed:FireServer()
                        stats.fishCaught = stats.fishCaught + 1
                    end)
                    task.wait(d.catch)
                    logInfo("FISHING", "‚úÖ Fish caught! Total:", stats.fishCaught)
                end
                
                -- Step 6: Rest
                logInfo("FISHING", "üí§ Resting... ("..d.rest.."s)")
                task.wait(d.rest)
                
                logInfo("FISHING", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ AUTO Cycle #"..cycleCount.." END ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                state.lastActivity = tick()
            end)
            
            local elapsed = perfEnd("AutoCycle_"..cycleCount)
            logDebug("FISHING", "‚è±Ô∏è Cycle duration:", string.format("%.2f", elapsed or 0).."s")
            
            if not ok then
                logError("FISHING", "‚ùå Cycle error:", tostring(err))
                stats.errorCount.fishing = stats.errorCount.fishing + 1
                task.wait(3)
            end
        end
        
        state.fishingThread = nil
        logInfo("FISHING", "üõë Auto fishing stopped")
    end)
end

-- ========== SEMI MODE FISHING (WITH TAP) ==========
local function startSemiMode()
    if state.fishingThread then 
        logWarn("FISHING", "Already running")
        return 
    end
    
    logInfo("FISHING", "üéÆ Starting SEMI Mode (Manual Minigame)")
    
    if state.enableSpoof then
        applyFullSpoof()
    end
    
    -- Start auto tap immediately for semi mode
    startAutoTap()
    
    state.fishingThread = task.spawn(function()
        local cycleCount = 0
        
        while state.semiMode do
            cycleCount = cycleCount + 1
            stats.totalCycles = cycleCount
            perfStart("SemiCycle_"..cycleCount)
            
            logInfo("FISHING", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ SEMI Cycle #"..cycleCount.." START ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            
            local ok, err = pcall(function()
                local d = state.fishingDelay
                
                -- Save position
                local player = Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    state.lastFishingSpot = player.Character.HumanoidRootPart.CFrame
                end
                
                -- Step 1: Equip Rod
                logInfo("FISHING", "‚öôÔ∏è Equipping rod... ("..d.equip.."s)")
                if RE_EquipTool then
                    RE_EquipTool:FireServer(1)
                    task.wait(d.equip)
                end

                -- Step 2: Charge Rod (Perfect)
                logInfo("FISHING", "‚ö° Charging rod PERFECT... ("..d.charge.."s)")
                if RF_Charge then
                    pcall(function()
                        RF_Charge:InvokeServer(workspace:GetServerTimeNow())
                    end)
                    task.wait(d.charge)
                end

                -- Step 3: Cast (Perfect)
                logInfo("FISHING", "üéØ Casting PERFECT... ("..d.cast.."s)")
                task.wait(d.cast)
                
                -- Step 4: Wait for BITE + MINIGAME (Auto Tap Active)
                logInfo("FISHING", "üéÆ SEMI MODE - Auto tap handling minigame... ("..d.bite.."s)")
                logInfo("FISHING", "üñ±Ô∏è Tapping at", state.tapSpeed, "ms speed")
                task.wait(d.bite)
                logInfo("FISHING", "‚úÖ Minigame completed (Semi)")

                -- Step 5: MANUAL CATCH from Auto Tap
                logInfo("FISHING", "‚ú® Catching from tap... ("..d.catch.."s)")
                task.wait(d.catch)
                
                -- Fish is caught by auto tap, just increment counter
                stats.fishCaught = stats.fishCaught + 1
                logInfo("FISHING", "‚úÖ Fish caught! Total:", stats.fishCaught)
                
                -- Step 6: Rest
                logInfo("FISHING", "üí§ Resting... ("..d.rest.."s)")
                task.wait(d.rest)
                
                logInfo("FISHING", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ SEMI Cycle #"..cycleCount.." END ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                state.lastActivity = tick()
            end)
            
            local elapsed = perfEnd("SemiCycle_"..cycleCount)
            logDebug("FISHING", "‚è±Ô∏è Cycle duration:", string.format("%.2f", elapsed or 0).."s")
            
            if not ok then
                logError("FISHING", "‚ùå Cycle error:", tostring(err))
                stats.errorCount.fishing = stats.errorCount.fishing + 1
                task.wait(3)
            end
        end
        
        state.fishingThread = nil
        stopAutoTap()
        logInfo("FISHING", "üõë Semi mode stopped")
    end)
end

-- ========== SELLING LOGIC ==========
local function sellFish(manual)
    perfStart("Sell")
    
    local player = Players.LocalPlayer
    if not player then return end
    
    local protectedFish = {}
    pcall(function()
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            for _, item in ipairs(backpack:GetChildren()) do
                local tier = getFishTier(item.Name)
                if tier and state.filterRare[tier] then
                    table.insert(protectedFish, {name = item.Name, tier = tier})
                end
            end
        end
    end)
    
    if #protectedFish == 0 then
        if RF_SellAll then
            pcall(function()
                RF_SellAll:InvokeServer()
                logInfo("SELL", "‚úÖ Sold fish", manual and "(Manual)" or "(Auto)")
            end)
        end
    else
        logInfo("SELL", "Skipped - Protected fish:")
        for _, fish in ipairs(protectedFish) do
            logInfo("SELL", " -", fish.name, "["..fish.tier.."]")
        end
    end
    
    perfEnd("Sell")
end

-- ========== PLAYER MOVEMENT ==========
local function setWalkSpeed(speed)
    local player = Players.LocalPlayer
    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = speed
            state.customWalkSpeed = speed
            logInfo("PLAYER", "üèÉ WalkSpeed set to:", speed)
        end
    end
end

local function setJumpPower(power)
    local player = Players.LocalPlayer
    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = power
            state.customJumpPower = power
            logInfo("PLAYER", "ü¶ò JumpPower set to:", power)
        end
    end
end

local function resetMovement()
    setWalkSpeed(state.originalWalkSpeed)
    setJumpPower(state.originalJumpPower)
    logInfo("PLAYER", "‚úÖ Movement reset to default")
    
    StarterGui:SetCore("SendNotification", {
        Title = "‚úÖ Reset Complete",
        Text = "Speed & Jump restored!",
        Duration = 2
    })
end

-- ========== PLAYER ABILITIES ==========
local function toggleInfiniteJump()
    state.infiniteJump = not state.infiniteJump
    logInfo("PLAYER", "‚ôæÔ∏è Infinite Jump:", tostring(state.infiniteJump))
    
    if state.infiniteJump then
        if state.infiniteJumpConnection then
            state.infiniteJumpConnection:Disconnect()
        end
        
        state.infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
            if state.infiniteJump then
                local player = Players.LocalPlayer
                if player and player.Character then
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Swimming then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end
        end)
        
        StarterGui:SetCore("SendNotification", {
            Title = "‚úÖ Infinite Jump ON",
            Text = "Jump infinitely enabled!",
            Duration = 2
        })
    else
        if state.infiniteJumpConnection then
            state.infiniteJumpConnection:Disconnect()
            state.infiniteJumpConnection = nil
        end
        
        StarterGui:SetCore("SendNotification", {
            Title = "‚ùå Infinite Jump OFF",
            Text = "Infinite jump disabled!",
            Duration = 2
        })
    end
end

local function toggleRadar()
    state.radarEnabled = not state.radarEnabled
    logInfo("PLAYER", "üì° Radar:", tostring(state.radarEnabled))
    
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    
    if state.radarEnabled then
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            local radar = backpack:FindFirstChild("Radar") or backpack:FindFirstChild("radar")
            if radar and radar:IsA("Tool") then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:EquipTool(radar)
                    logInfo("PLAYER", "‚úÖ Radar equipped")
                end
            else
                logWarn("PLAYER", "Radar not found in backpack")
            end
        end
        
        StarterGui:SetCore("SendNotification", {
            Title = "‚úÖ Radar ON",
            Text = "Radar equipped!",
            Duration = 2
        })
    else
        StarterGui:SetCore("SendNotification", {
            Title = "‚ùå Radar OFF",
            Text = "Radar disabled!",
            Duration = 2
        })
    end
end

local function toggleDivingGear()
    state.divingGearEnabled = not state.divingGearEnabled
    logInfo("PLAYER", "ü§ø Diving Gear:", tostring(state.divingGearEnabled))
    
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    
    if state.divingGearEnabled then
        -- Try to equip diving gear if available
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            local gear = backpack:FindFirstChild("Diving Gear") or backpack:FindFirstChild("diving gear")
            if gear and gear:IsA("Tool") then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:EquipTool(gear)
                    logInfo("PLAYER", "‚úÖ Diving gear equipped")
                end
            else
                logInfo("PLAYER", "‚ö†Ô∏è Diving gear not owned, but god mode active")
            end
        end
        
        -- God mode underwater (ALWAYS ACTIVE even without gear)
        if state.divingGearConnection then
            state.divingGearConnection:Disconnect()
        end
        
        state.divingGearConnection = RunService.Heartbeat:Connect(function()
            if state.divingGearEnabled then
                local character = player.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        -- Force max health constantly
                        humanoid.MaxHealth = 100
                        humanoid.Health = 100
                        
                        if humanoid.Health < 100 then
                            humanoid.Health = 100
                        end
                    end
                    
                    -- Infinite oxygen/air
                    local playerGui = player:FindFirstChild("PlayerGui")
                    if playerGui then
                        for _, obj in ipairs(playerGui:GetDescendants()) do
                            local objName = string.lower(obj.Name)
                            
                            if obj:IsA("NumberValue") or obj:IsA("IntValue") then
                                if string.find(objName, "air") or 
                                   string.find(objName, "oxygen") or
                                   string.find(objName, "breath") or
                                   string.find(objName, "dive") then
                                    pcall(function()
                                        obj.Value = math.huge
                                    end)
                                end
                            end
                            
                            if obj:IsA("Frame") or obj:IsA("ImageLabel") then
                                if string.find(objName, "air") or 
                                   string.find(objName, "oxygen") or
                                   string.find(objName, "breath") then
                                    pcall(function()
                                        obj.Size = UDim2.new(1, 0, obj.Size.Y.Scale, obj.Size.Y.Offset)
                                    end)
                                    
                                    local fill = obj:FindFirstChild("Fill") or obj:FindFirstChild("Bar")
                                    if fill then
                                        pcall(function()
                                            fill.Size = UDim2.new(1, 0, fill.Size.Y.Scale, fill.Size.Y.Offset)
                                        end)
                                    end
                                end
                            end
                        end
                        
                        for _, obj in ipairs(character:GetDescendants()) do
                            if obj:IsA("NumberValue") or obj:IsA("IntValue") then
                                local objName = string.lower(obj.Name)
                                if string.find(objName, "air") or 
                                   string.find(objName, "oxygen") or
                                   string.find(objName, "breath") then
                                    pcall(function()
                                        obj.Value = math.huge
                                    end)
                                end
                            end
                        end
                    end
                end
            end
        end)
        
        StarterGui:SetCore("SendNotification", {
            Title = "‚úÖ Diving God Mode ON",
            Text = "Infinite oxygen + invincible underwater!",
            Duration = 3
        })
    else
        if state.divingGearConnection then
            state.divingGearConnection:Disconnect()
            state.divingGearConnection = nil
        end
        
        StarterGui:SetCore("SendNotification", {
            Title = "‚ùå Diving Gear OFF",
            Text = "Diving gear disabled!",
            Duration = 2
        })
    end
end

local function respawnPlayer()
    local player = Players.LocalPlayer
    if player and player.Character then
        player.Character:BreakJoints()
        logInfo("PLAYER", "üíÄ Player respawned")
        
        StarterGui:SetCore("SendNotification", {
            Title = "üíÄ Respawned",
            Text = "Character respawned!",
            Duration = 2
        })
    end
end

-- ========== TELEPORT LOCATIONS ==========
local NPCS_ORDER = {
    {name = "Rods Here!", pos = Vector3.new(146.81, 20.47, 2837.95)},
    {name = "Bobbers", pos = Vector3.new(103.67, 17.28, 2867.04)},
    {name = "Skin Crates", pos = Vector3.new(78.28, 17.28, 2865.28)},
    {name = "Sell Here!", pos = Vector3.new(44.10, 17.28, 2867.51)},
    {name = "Utility Store", pos = Vector3.new(-43.83, 20.46, 2874.31)},
    {name = "Traveling Merchant", pos = Vector3.new(-128.38, 2.58, 2767.39)}
}

local ISLANDS_ORDER = {
    {name = "Fisherman Island", pos = Vector3.new(122.96, 3.37, 2784.57)},
    {name = "Ancient Jungle", pos = Vector3.new(1235.60, 7.97, -123.50)},
    {name = "Lost Isle", pos = Vector3.new(-3779.84, -135.07, -975.06)},
    {name = "Esoteric Depths", pos = Vector3.new(2954.65, -1302.73, 1529.24)},
    {name = "Crater Island", pos = Vector3.new(993.45, 2.49, 5012.44)},
    {name = "Tropical Grove", pos = Vector3.new(-2049.86, 6.27, 3655.13)},
    {name = "Coral Reefs", pos = Vector3.new(-2730.52, 4.00, 2174.49)},
    {name = "Kohana Volcano", pos = Vector3.new(-598.58, 59.00, 108.43)}
}

local EVENT_LOCATIONS = {
    {name = "Meteor Rain", pos = Vector3.new(500, 100, 500)},
    {name = "Ghost Worm", pos = Vector3.new(-1000, 50, -1000)},
    {name = "Super Mutated", pos = Vector3.new(1500, 75, 1500)},
    {name = "Radiant", pos = Vector3.new(-2000, 100, 2000)},
    {name = "Shark Hunt", pos = Vector3.new(3000, 25, -3000)}
}

local function teleportTo(position, name)
    perfStart("Teleport")
    local player = Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
            logInfo("TELEPORT", "‚úÖ Teleported to:", name)
        end)
    end
    perfEnd("Teleport")
end

local function getPlayerList()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

local function teleportToPlayer(playerName)
    logInfo("TELEPORT", "üöÄ Attempting teleport to player:", playerName)
    
    if not playerName or playerName == "" then
        logError("TELEPORT", "‚ùå No player selected")
        return
    end
    
    local targetPlayer = Players:FindFirstChild(playerName)
    
    if not targetPlayer then
        logError("TELEPORT", "‚ùå Player not found:", playerName)
        return
    end
    
    if not targetPlayer.Character then
        logError("TELEPORT", "‚ùå Player has no character")
        return
    end
    
    local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not targetHRP then
        logError("TELEPORT", "‚ùå Cannot find HumanoidRootPart")
        return
    end
    
    local player = Players.LocalPlayer
    if not player or not player.Character then
        logError("TELEPORT", "‚ùå Local player character not found")
        return
    end
    
    local localHRP = player.Character:FindFirstChild("HumanoidRootPart")
    if not localHRP then
        logError("TELEPORT", "‚ùå Local HumanoidRootPart not found")
        return
    end
    
    local success = pcall(function()
        localHRP.CFrame = targetHRP.CFrame * CFrame.new(0, 0, 3)
        logInfo("TELEPORT", "‚úÖ Teleported to player:", targetPlayer.Name)
    end)
    
    if success then
        StarterGui:SetCore("SendNotification", {
            Title = "‚úÖ Teleport Success",
            Text = "Teleported to " .. targetPlayer.Name,
            Duration = 3
        })
    else
        logError("TELEPORT", "‚ùå Teleport execution failed")
    end
end

-- ========== ANTI-AFK SYSTEM ==========
local function startAntiAFK()
    task.spawn(function()
        while state.antiAFK do
            local player = Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = player.Character.HumanoidRootPart
                local randomOffset = Vector3.new(math.random(-2, 2), 0, math.random(-2, 2))
                hrp.CFrame = hrp.CFrame + randomOffset
            end
            task.wait(math.random(45, 90))
        end
    end)
    logInfo("STABILITY", "‚úÖ Anti-AFK enabled")
end

-- ========== EMERGENCY RESET ==========
local function emergencyReset()
    logWarn("RESET", "üö® EMERGENCY RESET TRIGGERED")
    
    state.autoFishing = false
    state.semiMode = false
    state.autoSell = false
    state.antiAFK = false
    state.enableSpoof = false
    
    stopAutoTap()
    
    task.wait(0.5)
    
    stats.fishCaught = 0
    stats.rareCaught = 0
    stats.totalCycles = 0
    stats.rareFish = {}
    
    logInfo("RESET", "‚úÖ All systems stopped and stats cleared")
end

-- ========== GUI TOGGLE & MINIMIZE SYSTEM ==========
local guiVisible = true
local guiMinimized = false

local function minimizeGUI()
    if not Window or not Window.Main then return end
    
    guiMinimized = not guiMinimized
    
    if guiMinimized then
        -- Store original size
        if not Window.OriginalSize then
            Window.OriginalSize = Window.Main.Size
        end
        
        -- Hide all content except title
        for _, child in ipairs(Window.Main:GetChildren()) do
            if child:IsA("Frame") or child:IsA("ScrollingFrame") then
                if child.Name ~= "Title" and child.Name ~= "TopBar" then
                    child.Visible = false
                end
            end
        end
        
        -- Minimize to title bar only
        Window.Main.Size = UDim2.new(0, 500, 0, 40)
        
        logInfo("GUI", "üì¶ Menu minimized")
        StarterGui:SetCore("SendNotification", {
            Title = "üì¶ Menu Minimized",
            Text = "Press HOME to restore",
            Duration = 2
        })
    else
        -- Restore all content
        for _, child in ipairs(Window.Main:GetChildren()) do
            if child:IsA("Frame") or child:IsA("ScrollingFrame") then
                child.Visible = true
            end
        end
        
        -- Restore original size
        if Window.OriginalSize then
            Window.Main.Size = Window.OriginalSize
        else
            Window.Main.Size = UDim2.new(0, 500, 0, 600)
        end
        
        logInfo("GUI", "üìÇ Menu restored")
        StarterGui:SetCore("SendNotification", {
            Title = "üìÇ Menu Restored",
            Text = "All tabs visible",
            Duration = 2
        })
    end
end

local function toggleGUI()
    guiVisible = not guiVisible
    
    if Window and Window.Main then
        Window.Main.Visible = guiVisible
        logInfo("GUI", "Menu", guiVisible and "shown" or "hidden")
        
        StarterGui:SetCore("SendNotification", {
            Title = guiVisible and "üëÅÔ∏è Menu Shown" or "üôà Menu Hidden",
            Text = guiVisible and "Press INSERT to hide" or "Press INSERT to show",
            Duration = 2
        })
    end
end

-- Prevent GUI inputs from affecting game
task.spawn(function()
    task.wait(1)
    if Window and Window.Main then
        -- Make GUI absorb all inputs
        for _, desc in ipairs(Window.Main:GetDescendants()) do
            if desc:IsA("GuiButton") or desc:IsA("TextButton") or desc:IsA("ImageButton") then
                desc.Modal = true
            end
            if desc:IsA("TextBox") then
                desc:GetPropertyChangedSignal("Text"):Connect(function()
                    -- Prevent text input from affecting game
                end)
            end
        end
        logInfo("GUI", "‚úÖ GUI input protection enabled")
    end
end)

-- Hotkey listeners
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    -- Only respond if not typing in textbox
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.Insert then
            toggleGUI()
        elseif input.KeyCode == Enum.KeyCode.Home then
            minimizeGUI()
        end
    end
end)

-- ========== GUI: FISHING MODE SELECTION ==========
FishingModeSection:NewLabel("‚ö†Ô∏è Choose ONE mode only!")
FishingModeSection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

-- ========== GUI: FULL AUTO FISHING TAB ==========
FishingSection:NewToggle("ü§ñ Full Auto Mode", "Complete automation (instant)", function(v)
    if v then
        -- Disable semi mode
        if state.semiMode then
            state.semiMode = false
            stopAutoTap()
            logInfo("GUI", "Semi mode disabled")
        end
        
        state.autoFishing = true
        logInfo("GUI", "Full Auto Mode: ON")
        startAutoFishing()
        
        StarterGui:SetCore("SendNotification", {
            Title = "ü§ñ Full Auto Mode ON",
            Text = "Instant bite & catch!",
            Duration = 3
        })
    else
        state.autoFishing = false
        state.fishingThread = nil
        logInfo("GUI", "Full Auto Mode: OFF")
    end
end)

FishingSection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
FishingSection:NewLabel("Uses all Fishing Controls below")

-- ========== GUI: SEMI MODE TAB ==========
SemiSection:NewToggle("üéÆ Semi Mode", "Perfect cast + manual minigame tap", function(v)
    if v then
        -- Disable auto fishing
        if state.autoFishing then
            state.autoFishing = false
            state.fishingThread = nil
            logInfo("GUI", "Auto fishing disabled")
        end
        
        state.semiMode = true
        logInfo("GUI", "Semi Mode: ON")
        startSemiMode()
        
        StarterGui:SetCore("SendNotification", {
            Title = "üéÆ Semi Mode ON",
            Text = "Auto tap active during minigame!",
            Duration = 3
        })
    else
        state.semiMode = false
        state.fishingThread = nil
        stopAutoTap()
        logInfo("GUI", "Semi Mode: OFF")
    end
end)

SemiSection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
SemiSection:NewLabel("‚öôÔ∏è Tap Speed Setting:")

SemiSection:NewSlider("Tap Speed (ms)", "Speed: 0ms=Fastest, 500ms=Slowest", 500, 0, function(v)
    state.tapSpeed = v
    logInfo("GUI", "Tap Speed:", v, "ms", "("..(1000/math.max(v,1)).." taps/sec)")
end)

SemiSection:NewLabel("Current: 100ms (10 taps/sec)")

-- ========== GUI: FISHING CONTROLS ==========
FishingControlSection:NewLabel("‚öôÔ∏è Perfect Default Settings:")
FishingControlSection:NewLabel("All values optimized for perfect fishing")
FishingControlSection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

FishingControlSection:NewSlider("Equip Delay", "Default: 0.3s (Perfect)", 2, 0.1, function(v)
    state.fishingDelay.equip = v
    logInfo("DELAY", "Equip:", v.."s")
end)
FishingControlSection:NewLabel("Current: 0.3s ‚úÖ")

FishingControlSection:NewSlider("Charge Delay", "Default: 0.5s (Perfect)", 2, 0.1, function(v)
    state.fishingDelay.charge = v
    logInfo("DELAY", "Charge:", v.."s")
end)
FishingControlSection:NewLabel("Current: 0.5s ‚úÖ")

FishingControlSection:NewSlider("Cast Wait", "Default: 1.0s (Perfect)", 3, 0.2, function(v)
    state.fishingDelay.cast = v
    logInfo("DELAY", "Cast:", v.."s")
end)
FishingControlSection:NewLabel("Current: 1.0s ‚úÖ")

FishingControlSection:NewSlider("Bite Wait", "Default: 3.0s (Perfect)", 10, 1, function(v)
    state.fishingDelay.bite = v
    logInfo("DELAY", "Bite:", v.."s")
end)
FishingControlSection:NewLabel("Current: 3.0s ‚úÖ")

FishingControlSection:NewSlider("Catch Delay", "Default: 0.5s (Perfect)", 2, 0.1, function(v)
    state.fishingDelay.catch = v
    logInfo("DELAY", "Catch:", v.."s")
end)
FishingControlSection:NewLabel("Current: 0.5s ‚úÖ")

FishingControlSection:NewSlider("Rest Delay", "Default: 1.5s (Perfect)", 5, 0.5, function(v)
    state.fishingDelay.rest = v
    logInfo("DELAY", "Rest:", v.."s")
end)
FishingControlSection:NewLabel("Current: 1.5s ‚úÖ")

FishingControlSection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

FishingControlSection:NewButton("üîß Unstuck + Restart Fishing", "Fix stuck animation & restart fishing", function()
    unstuckAndRestart()
end)

-- ========== GUI: SELLING TAB ==========
SellSection:NewLabel("üõ°Ô∏è Filter Fish (Don't Sell)")

SellSection:NewToggle("Secret Fish", "Don't sell Secret tier", function(v)
    state.filterRare.Secret = v
    logInfo("FILTER", "Secret fish filter:", tostring(v))
end)

SellSection:NewToggle("Mythic Fish", "Don't sell Mythic tier", function(v)
    state.filterRare.Mythic = v
    logInfo("FILTER", "Mythic fish filter:", tostring(v))
end)

SellSection:NewToggle("Legendary Fish", "Don't sell Legendary tier", function(v)
    state.filterRare.Legendary = v
    logInfo("FILTER", "Legendary fish filter:", tostring(v))
end)

SellSection:NewToggle("Epic Fish", "Don't sell Epic tier", function(v)
    state.filterRare.Epic = v
    logInfo("FILTER", "Epic fish filter:", tostring(v))
end)

SellSection:NewToggle("Rare Fish", "Don't sell Rare tier", function(v)
    state.filterRare.Rare = v
    logInfo("FILTER", "Rare fish filter:", tostring(v))
end)

SellSection:NewButton("üíµ Manual Sell", "Sell fish now (safe)", function()
    sellFish(true)
end)

SellSection:NewToggle("Auto Sell Every 30s", "Automatic selling", function(v)
    state.autoSell = v
    logInfo("SELL", "Auto sell:", tostring(v))
    if v then
        task.spawn(function()
            while state.autoSell do
                task.wait(30)
                if state.autoSell then sellFish(false) end
            end
        end)
    end
end)

-- ========== GUI: PLAYER TAB ==========
PlayerMovementSection:NewSlider("WalkSpeed", "Set walking speed (16-200)", 200, 16, function(v)
    setWalkSpeed(v)
end)

PlayerMovementSection:NewSlider("JumpPower", "Set jump power (50-300)", 300, 50, function(v)
    setJumpPower(v)
end)

PlayerMovementSection:NewButton("üîÑ Reset Speed & Jump", "Reset to default values", function()
    resetMovement()
end)

PlayerAbilitySection:NewButton("‚ôæÔ∏è Toggle Infinite Jump", "Enable/disable infinite jump", function()
    toggleInfiniteJump()
end)

PlayerAbilitySection:NewButton("üì° Toggle Radar", "Auto-equip radar from backpack", function()
    toggleRadar()
end)

PlayerAbilitySection:NewButton("ü§ø Toggle Diving God Mode", "Invincible underwater (works without gear!)", function()
    toggleDivingGear()
end)

PlayerActionSection:NewButton("üíÄ Respawn", "Respawn character", function()
    respawnPlayer()
end)

-- ========== GUI: TRAVEL TAB ==========
for _, npc in ipairs(NPCS_ORDER) do
    NPCSection:NewButton(npc.name, "Teleport to " .. npc.name, function()
        teleportTo(npc.pos, npc.name)
    end)
end

for _, island in ipairs(ISLANDS_ORDER) do
    IslandSection:NewButton(island.name, "Teleport to " .. island.name, function()
        teleportTo(island.pos, island.name)
    end)
end

PlayerTeleportSection:NewDropdown("Select Player", "Choose player to teleport to", getPlayerList(), function(value)
    state.selectedPlayer = value
    logInfo("GUI", "Player selected:", value)
end)

PlayerTeleportSection:NewButton("üîÑ Refresh Player List", "Reopen menu to see updated list", function()
    logInfo("GUI", "Tip: Close and reopen menu to refresh player list")
    
    StarterGui:SetCore("SendNotification", {
        Title = "üí° Tip",
        Text = "Close & reopen menu (INSERT) to refresh",
        Duration = 4
    })
end)

PlayerTeleportSection:NewButton("üöÄ Teleport to Player", "Teleport to selected player", function()
    if state.selectedPlayer and state.selectedPlayer ~= "" then
        teleportToPlayer(state.selectedPlayer)
    else
        logError("TELEPORT", "Please select a player first")
        StarterGui:SetCore("SendNotification", {
            Title = "‚ö†Ô∏è No Player Selected",
            Text = "Please select a player from dropdown!",
            Duration = 3
        })
    end
end)

-- ========== GUI: EVENTS TAB ==========
EventSection:NewLabel("üé™ Admin Event Teleports")
EventSection:NewLabel("‚ö†Ô∏è Positions are approximate")

for _, event in ipairs(EVENT_LOCATIONS) do
    EventSection:NewButton(event.name, "Teleport to " .. event.name, function()
        teleportTo(event.pos, event.name)
        
        StarterGui:SetCore("SendNotification", {
            Title = "üé™ Event Teleport",
            Text = "Teleported to " .. event.name,
            Duration = 3
        })
    end)
end

-- ========== GUI: SPOOF TAB ==========
SpoofSection:NewLabel("‚ú® Get effects without owning items!")

SpoofSection:NewToggle("Enable Full Spoof", "Activate equipment spoof", function(v)
    state.enableSpoof = v
    logInfo("SPOOF", "Spoof system:", tostring(v))
    if v then 
        applyFullSpoof() 
        StarterGui:SetCore("SendNotification", {
            Title = "‚úÖ Spoof Enabled",
            Text = "Equipment spoofed!",
            Duration = 3
        })
    end
end)

SpoofSection:NewDropdown("Select Rod", "Choose rod to spoof", 
    {"Ghostfinn Rod", "Rod of the Depths", "Trident Rod", "Kings Rod", "Mythical Rod", "No-Life Rod", "Fast Rod"}, 
    function(value)
        state.spoofRod = value
        logInfo("SPOOF", "Rod selected:", value)
        if state.enableSpoof then 
            task.wait(0.2)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewDropdown("Select Rod Skin", "Choose visual skin",
    {"Default", "Aurora Rod Skin", "Twilight Rod Skin", "Void Rod Skin", "Solar Rod Skin", "Lunar Rod Skin"},
    function(value)
        state.spoofSkin = value
        logInfo("SPOOF", "Skin selected:", value)
        if state.enableSpoof then 
            task.wait(0.2)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewButton("üîÑ Reapply Spoof", "Reapply equipment spoof", function()
    if state.enableSpoof then
        applyFullSpoof()
        StarterGui:SetCore("SendNotification", {
            Title = "üîÑ Spoof Reapplied",
            Text = "Equipment refreshed!",
            Duration = 2
        })
    else
        logWarn("SPOOF", "Enable spoof first!")
        StarterGui:SetCore("SendNotification", {
            Title = "‚ö†Ô∏è Spoof Disabled",
            Text = "Enable spoof toggle first!",
            Duration = 3
        })
    end
end)

-- ========== GUI: STABILITY TAB ==========
StabilitySection:NewToggle("Anti-AFK Protection", "Prevent AFK kick", function(v)
    state.antiAFK = v
    logInfo("STABILITY", "Anti-AFK:", tostring(v))
    if v then startAntiAFK() end
end)

StabilitySection:NewButton("‚õî Emergency Stop All", "Stop all features", function()
    state.autoFishing = false
    state.semiMode = false
    state.autoSell = false
    state.antiAFK = false
    stopAutoTap()
    logWarn("STABILITY", "üö® ALL SYSTEMS STOPPED")
    StarterGui:SetCore("SendNotification", {
        Title = "‚õî Emergency Stop",
        Text = "All systems stopped!",
        Duration = 3
    })
end)

StabilitySection:NewButton("üö® Emergency Reset", "Reset everything", function()
    emergencyReset()
    StarterGui:SetCore("SendNotification", {
        Title = "üö® Emergency Reset",
        Text = "All systems reset!",
        Duration = 3
    })
end)

StabilitySection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
StabilitySection:NewLabel("üîë Hotkeys:")
StabilitySection:NewLabel("INSERT = Hide/Show Menu")
StabilitySection:NewLabel("HOME = Minimize/Restore Menu")

-- ========== GUI: DEBUG TAB ==========
DebugSection:NewButton("üñ•Ô∏è Open Developer Console (F9)", "Open Roblox debug console", function()
    StarterGui:SetCore("DevConsoleVisible", true)
    logInfo("DEBUG", "Developer console opened")
    
    StarterGui:SetCore("SendNotification", {
        Title = "üñ•Ô∏è Console Opened",
        Text = "Press F9 again to close",
        Duration = 2
    })
end)

DebugSection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
DebugSection:NewLabel("üìä Statistics:")

DebugSection:NewButton("üìà Show Stats", "Display fishing statistics", function()
    logInfo("STATS", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ STATISTICS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    logInfo("STATS", "Fish Caught:", stats.fishCaught)
    logInfo("STATS", "Rare Caught:", stats.rareCaught)
    logInfo("STATS", "Total Cycles:", stats.totalCycles)
    logInfo("STATS", "Errors - Fishing:", stats.errorCount.fishing)
    logInfo("STATS", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    StarterGui:SetCore("SendNotification", {
        Title = "üìä Statistics",
        Text = "Fish: "..stats.fishCaught.." | Rare: "..stats.rareCaught,
        Duration = 5
    })
end)

-- ========== FISH CAUGHT EVENT ==========
if RE_FishCaught then
    pcall(function()
        RE_FishCaught.OnClientEvent:Connect(function(fishData)
            if fishData and fishData.Name then
                local fishName = tostring(fishData.Name)
                logInfo("CATCH", "üé£ Caught:", fishName)
                
                local tier = getFishTier(fishName)
                if tier then
                    alertRareCatch(fishName, tier)
                end
            end
        end)
        logInfo("EVENT", "‚úÖ Fish caught event listener registered")
    end)
else
    logWarn("EVENT", "‚ö†Ô∏è Fish caught event not found")
end

-- ========== INITIALIZE ==========
logInfo("INIT", "‚úÖ‚úÖ‚úÖ FishItHub v5.1 LOADED ‚úÖ‚úÖ‚úÖ")
logInfo("INIT", "üé£ All systems ready!")
logInfo("INIT", "")
logInfo("INIT", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
logInfo("INIT", "üìå ALL FIXES APPLIED:")
logInfo("INIT", "  ‚úÖ Full Auto Mode: Completely separate")
logInfo("INIT", "  ‚úÖ Semi Mode: Completely separate")
logInfo("INIT", "  ‚úÖ Auto tap ONLY in Semi Mode")
logInfo("INIT", "  ‚úÖ Perfect default settings shown")
logInfo("INIT", "  ‚úÖ Unstuck + Restart combined")
logInfo("INIT", "  ‚úÖ Diving god mode (no gear needed)")
logInfo("INIT", "  ‚úÖ GUI input protection enabled")
logInfo("INIT", "  ‚úÖ Minimize function working")
logInfo("INIT", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
logInfo("INIT", "")
logInfo("INIT", "üéÆ FISHING MODES:")
logInfo("INIT", "  ‚Ä¢ Full Auto: Instant bite & catch")
logInfo("INIT", "  ‚Ä¢ Semi Mode: Perfect cast + auto tap minigame")
logInfo("INIT", "  ‚ö†Ô∏è ONLY activate ONE mode at a time!")
logInfo("INIT", "")
logInfo("INIT", "‚öôÔ∏è PERFECT SETTINGS:")
logInfo("INIT", "  ‚Ä¢ Equip: 0.3s")
logInfo("INIT", "  ‚Ä¢ Charge: 0.5s")
logInfo("INIT", "  ‚Ä¢ Cast: 1.0s")
logInfo("INIT", "  ‚Ä¢ Bite: 3.0s")
logInfo("INIT", "  ‚Ä¢ Catch: 0.5s")
logInfo("INIT", "  ‚Ä¢ Rest: 1.5s")
logInfo("INIT", "")
logInfo("INIT", "üîë HOTKEYS:")
logInfo("INIT", "  INSERT = Hide/Show Menu")
logInfo("INIT", "  HOME = Minimize/Restore Menu")
logInfo("INIT", "  F9 = Developer Console")
logInfo("INIT", "")
logInfo("INIT", "üí° TIPS:")
logInfo("INIT", "  ‚Ä¢ GUI clicks won't affect game")
logInfo("INIT", "  ‚Ä¢ Diving god mode works without gear")
logInfo("INIT", "  ‚Ä¢ Use Unstuck+Restart if stuck")
logInfo("INIT", "")

StarterGui:SetCore("SendNotification", {
    Title = "‚úÖ FishItHub v5.1 Ready!",
    Text = "All fixes applied! Check console for details.",
    Duration = 6
})

StarterGui:SetCore("SendNotification", {
    Title = "üéÆ Choose Mode",
    Text = "Full Auto OR Semi Mode - Pick ONE only!",
    Duration = 5
}) then 
            task.wait(0.2)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewDropdown("Select Bait", "Choose bait to spoof",
    {"Singularity Bait", "Night Shrimp", "Truffle Worm", "Minnow", "Squid", "Fish Head", "Coral"},
    function(value)
        state.spoofBait = value
        logInfo("SPOOF", "Bait selected:", value)
        if state.enableSpoof
