-- [FishItHub v4.0 Ultimate] Complete Feature Set
-- Game: Fisch üêü
-- Author: Komar x ChatGPT x Claude
-- Features: Smart AutoFish, Rare Fish Filter, Island Teleports, Anti-AFK

print("[FishItHub] üîÑ Loading v4.0 Ultimate...")

-- ========== ENHANCED LOGGING SYSTEM ==========
local LOG_LEVELS = {DEBUG = 1, INFO = 2, WARN = 3, ERROR = 4, CRITICAL = 5}
local logHistory = {}
local MAX_LOG_HISTORY = 500
local currentLogLevel = LOG_LEVELS.INFO

local function addToHistory(level, category, message)
    table.insert(logHistory, {
        timestamp = tick(),
        level = level,
        category = category,
        message = message,
        time = os.date("%H:%M:%S")
    })
    if #logHistory > MAX_LOG_HISTORY then table.remove(logHistory, 1) end
end

local function safeConcat(...)
    local args = {...}
    local result = {}
    for i, v in ipairs(args) do
        table.insert(result, tostring(v))
    end
    return table.concat(result, " ")
end

local function log(level, category, ...)
    if level < currentLogLevel then return end
    local message = safeConcat(...)
    local prefix = "[FishItHub]["..category.."]"
    addToHistory(level, category, message)
    
    if level == LOG_LEVELS.DEBUG then print(prefix, "üîç", message)
    elseif level == LOG_LEVELS.INFO then print(prefix, "‚ÑπÔ∏è", message)
    elseif level == LOG_LEVELS.WARN then warn(prefix, "‚ö†Ô∏è", message)
    elseif level == LOG_LEVELS.ERROR then warn(prefix, "‚ùå", message)
    elseif level == LOG_LEVELS.CRITICAL then warn(prefix, "üî• CRITICAL:", message) end
end

local function logInfo(cat, ...) log(LOG_LEVELS.INFO, cat, ...) end
local function logWarn(cat, ...) log(LOG_LEVELS.WARN, cat, ...) end
local function logError(cat, ...) log(LOG_LEVELS.ERROR, cat, ...) end
local function logDebug(cat, ...) log(LOG_LEVELS.DEBUG, cat, ...) end

-- Performance Tracker
local perfTracker = {}
local function perfStart(name)
    perfTracker[name] = {start = tick(), count = (perfTracker[name] and perfTracker[name].count or 0) + 1}
end
local function perfEnd(name)
    if not perfTracker[name] then return end
    local elapsed = tick() - perfTracker[name].start
    perfTracker[name].lastDuration = elapsed
    perfTracker[name].totalTime = (perfTracker[name].totalTime or 0) + elapsed
    if elapsed > 5 then logWarn("PERF", name, "SLOW:", string.format("%.2f", elapsed).."s") end
    return elapsed
end

-- Statistics
local stats = {
    fishCaught = 0,
    rareCaught = 0,
    totalCycles = 0,
    errorCount = {fishing = 0, selling = 0, teleport = 0, init = 0},
    lastError = {},
    rareFish = {}
}

-- üß© Load Library
perfStart("LoadLibrary")
local success, ProjectMadara = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/idonthaveoneatm/Libraries/normal/quake/src"))()
end)
perfEnd("LoadLibrary")

if not success or not ProjectMadara then
    logError("INIT", "Failed to load library")
    return
end
logInfo("INIT", "‚úÖ Library loaded")

-- ü™ü Create GUI
local Main = ProjectMadara:Window({ Title = "FishItHub v4.0 Ultimate" })
if not Main then
    logError("INIT", "Failed to create window")
    return
end

-- üóÇÔ∏è Create Tabs
local Tabs = {}
local function createTab(name, color, icon)
    local ok, tab = pcall(function()
        return Main:Tab({ Name = name, tabColor = Color3.fromHex(color), Image = icon })
    end)
    if ok and tab then
        Tabs[name] = tab
        logInfo("GUI", "‚úÖ Tab:", name)
    else
        logError("GUI", "‚ùå Tab failed:", name)
    end
end

createTab("Fishing", "#3CB371", "rbxassetid://10709769841")
createTab("Selling", "#FFD700", "rbxassetid://10734952479")
createTab("Travel", "#1E90FF", "rbxassetid://10734886202")
createTab("Stability", "#FF6347", "rbxassetid://10723345518")

if not Tabs["Fishing"] then
    logError("INIT", "Critical: Tabs not initialized")
    return
end

-- üåê Find Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local net

pcall(function()
    net = ReplicatedStorage:WaitForChild("Packages", 5)
        :WaitForChild("_Index", 5)
        :WaitForChild("sleitnick_net@0.2.0", 5)
        :WaitForChild("net", 5)
end)

if not net then
    local pk = ReplicatedStorage:FindFirstChild("Packages")
    if pk then
        local idx = pk:FindFirstChild("_Index")
        if idx then
            for _, v in ipairs(idx:GetChildren()) do
                if string.find(v.Name, "sleitnick_net") then
                    net = v:FindFirstChild("net")
                    if net then break end
                end
            end
        end
    end
end

if not net then
    logError("NET", "Cannot find net folder")
    return
end

logInfo("NET", "‚úÖ Found net folder")

-- üéØ Get Remotes
local function getRemote(name)
    local found = net:FindFirstChild(name, true)
    if found then logInfo("REMOTE", "‚úÖ", name)
    else logWarn("REMOTE", "‚ö†Ô∏è Missing:", name) end
    return found
end

local RF_Charge = getRemote("RF/ChargeFishingRod")
local RF_RequestMini = getRemote("RF/RequestFishingMinigameStarted")
local RE_Completed = getRemote("RE/FishingCompleted")
local RE_EquipTool = getRemote("RE/EquipToolFromHotbar")
local RF_SellAll = getRemote("RF/SellAllItems")

-- ========== FISH CATEGORIES DATABASE ==========
local FISH_DATABASE = {
    Secret = {
        "Crystal Crab", "Orca", "Megalodon", "Worm Fish", "Ghost Shark",
        "Lochness Monster", "Monster Shark", "Eerie Shark", "Armored Shark",
        "Great Whale", "Kraken", "Queen Crab", "Robot Kraken", "King Crab",
        "Giant Squid", "Panther Eel"
    },
    Mythic = {
        "Dotted Stingray", "Manta Ray", "Hammerhead Shark", "Swordfish Shark",
        "Loggerhead Turtle", "Prismy Seahorse", "Blueflame Ray", "Magma Shark",
        "Hawks Turtle", "Abyss Seahorse", "Brown Megalodon", "Thresher Shark",
        "Blob Fish"
    },
    Legendary = {
        "Lined Cardinal Fish", "Yellowfish Tuna", "Chrome Tuna", "Bumblebee Grouper",
        "Lobster", "Lavafin Tuna", "Starjam Tang", "Greenbee Grouper",
        "Blue Lobster", "Enchanted Angelfish", "Magic Tang", "Axolotl",
        "Deep Sea Crab"
    },
    Epic = {
        "Dorhey Tang", "Unicorn Tang", "Cow Clownfish", "Moorish Idol",
        "Sushi Cardinal", "Longnose Butterfly", "Firecoal Damsel", "Panther Grouper",
        "Domino Damsel", "Astra Damsel", "Pufferfish", "Vampire Squid",
        "Angler Fish"
    },
    Rare = {
        "Barracuda Fish", "Korean Angelfish", "Ballina Angelfish", "Frog",
        "Darwin Clownfish", "Jewel Tang", "Candy Butterfly", "Fire Goby",
        "Kau Cardinal", "Rockform Cardianl", "Volsail Tang", "White Clownfish",
        "Scissortail Dartfish", "Charmed Tang", "Catfish", "Sheepshead Fish",
        "Coney Fish", "Jellyfish"
    }
}

-- ========== STATE ==========
local state = {
    autoFishing = false,
    autoSell = false,
    antiAFK = false,
    filterRare = {
        Secret = false,
        Mythic = false,
        Legendary = false,
        Epic = false,
        Rare = false
    },
    fishingThread = nil,
    lastFishingSpot = nil,
    playerTeleportUsername = ""
}

-- ========== RARE FISH DETECTION ==========
local function getFishTier(fishName)
    if not fishName then return nil end
    local fishStr = tostring(fishName)
    
    -- Check exact matches in database
    for tier, fishList in pairs(FISH_DATABASE) do
        for _, fish in ipairs(fishList) do
            if fishStr == fish or string.lower(fishStr) == string.lower(fish) then
                return tier
            end
        end
    end
    
    return nil
end

local function alertRareCatch(fishName, tier)
    stats.rareCaught = stats.rareCaught + 1
    table.insert(stats.rareFish, {name = fishName, tier = tier, time = os.date("%H:%M:%S")})
    logInfo("RARE", "üåüüåüüåü RARE CATCH:", fishName, "["..tier.."]", "üåüüåüüåü")
    
    -- Visual alert
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "üåü RARE FISH!",
        Text = fishName .. " [" .. tier .. "]",
        Duration = 5
    })
end

-- ========== FISHING LOGIC (PERFECT MODE) ==========
local function startFishing()
    if state.fishingThread then 
        logWarn("FISHING", "Already running")
        return 
    end
    
    logInfo("FISHING", "üé£ Starting Auto Fishing (Perfect Mode)...")
    state.fishingThread = task.spawn(function()
        local cycleCount = 0
        
        while state.autoFishing do
            cycleCount = cycleCount + 1
            stats.totalCycles = cycleCount
            
            local ok, err = pcall(function()
                -- Perfect timings - ultra fast
                local CHARGE_TIME = 0.15
                local MINI_TIME = 0.15
                local COMPLETE_TIME = 0.5
                local REST_TIME = 0.8
                
                -- Save fishing spot
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    state.lastFishingSpot = player.Character.HumanoidRootPart.CFrame
                end
                
                -- Equip Tool
                if RE_EquipTool then
                    RE_EquipTool:FireServer(1)
                end
                task.wait(CHARGE_TIME)

                -- Charge Rod
                if RF_Charge then
                    pcall(function()
                        RF_Charge:InvokeServer(workspace:GetServerTimeNow())
                    end)
                end
                task.wait(MINI_TIME)

                -- Request Minigame
                if RF_RequestMini then
                    pcall(function()
                        RF_RequestMini:InvokeServer(-1.2, 1)
                    end)
                end
                task.wait(COMPLETE_TIME)

                -- Complete Fishing
                if RE_Completed then
                    pcall(function()
                        RE_Completed:FireServer()
                    end)
                    stats.fishCaught = stats.fishCaught + 1
                end
                task.wait(REST_TIME)
            end)
            
            if not ok then
                logError("FISHING", "Cycle", cycleCount, "error:", tostring(err))
                stats.errorCount.fishing = stats.errorCount.fishing + 1
            end
        end
        
        logInfo("FISHING", "‚õî Stopped after", cycleCount, "cycles")
        state.fishingThread = nil
    end)
end

-- ========== SELLING LOGIC ==========
local function sellFish(manual)
    perfStart("Sell")
    
    local player = game.Players.LocalPlayer
    if not player then return end
    
    -- Check inventory for protected fish
    local protectedFish = {}
    pcall(function()
        local backpack = player:FindFirstChild("Backpack")
        
        if backpack then
            for _, item in ipairs(backpack:GetChildren()) do
                local tier = getFishTier(item.Name)
                if tier and state.filterRare[tier] then
                    table.insert(protectedFish, {name = item.Name, tier = tier})
                end
            end
        end
    end)
    
    -- Sell if no protected fish
    if #protectedFish == 0 then
        if RF_SellAll then
            local ok, res = pcall(function()
                return RF_SellAll:InvokeServer()
            end)
            if ok then
                logInfo("SELL", "‚úÖ Sold fish", manual and "(Manual)" or "(Auto)")
            else
                logError("SELL", "Failed:", tostring(res))
            end
        end
    else
        logInfo("SELL", "Skipped - Protected fish:")
        for _, fish in ipairs(protectedFish) do
            logInfo("SELL", " -", fish.name, "["..fish.tier.."]")
        end
    end
    
    perfEnd("Sell")
end

-- ========== TELEPORT LOCATIONS (ORDERED) ==========
local NPCS_ORDER = {
    {name = "Rods Here!", pos = Vector3.new(146.81, 20.47, 2837.95)},
    {name = "Bobbers", pos = Vector3.new(103.67, 17.28, 2867.04)},
    {name = "Skin Crates", pos = Vector3.new(78.28, 17.28, 2865.28)},
    {name = "Sell Here!", pos = Vector3.new(44.10, 17.28, 2867.51)},
    {name = "Utility Store", pos = Vector3.new(-43.83, 20.46, 2874.31)},
    {name = "Traveling Merchant", pos = Vector3.new(-128.38, 2.58, 2767.39)}
}

local ISLANDS_ORDER = {
    {name = "Fisherman Island", pos = Vector3.new(122.96, 3.37, 2784.57)},
    {name = "Ancient Jungle", pos = Vector3.new(1235.60, 7.97, -123.50)},
    {name = "Lost Isle", pos = Vector3.new(-3603.80, -2.66, -1310.98)},
    {name = "Esoteric Depths", pos = Vector3.new(2954.65, -1302.73, 1529.24)},
    {name = "Crater Island", pos = Vector3.new(993.45, 2.49, 5012.44)},
    {name = "Tropical Grove", pos = Vector3.new(-2049.86, 6.27, 3655.13)},
    {name = "Coral Reefs", pos = Vector3.new(-2730.52, 4.00, 2174.49)},
    {name = "Kohana Volcano", pos = Vector3.new(-598.58, 59.00, 108.43)}
}

local function teleportTo(position, name)
    perfStart("Teleport")
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local ok, err = pcall(function()
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
        end)
        if ok then
            logInfo("TELEPORT", "‚úÖ Teleported to:", name)
        else
            logError("TELEPORT", "Failed:", tostring(err))
        end
    end
    perfEnd("Teleport")
end

local function teleportToPlayer(username)
    perfStart("TeleportToPlayer")
    local player = game.Players.LocalPlayer
    
    if not username or username == "" then
        logError("TELEPORT", "Username is empty")
        return
    end
    
    local targetPlayer = game.Players:FindFirstChild(username)
    
    if not targetPlayer then
        logError("TELEPORT", "Player not found:", username)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ö†Ô∏è Error",
            Text = "Player '" .. username .. "' not found!",
            Duration = 3
        })
        return
    end
    
    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local ok, err = pcall(function()
                player.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
            end)
            if ok then
                logInfo("TELEPORT", "‚úÖ Teleported to player:", username)
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "‚úÖ Success",
                    Text = "Teleported to " .. username,
                    Duration = 3
                })
            else
                logError("TELEPORT", "Failed:", tostring(err))
            end
        end
    else
        logError("TELEPORT", "Player character not found:", username)
    end
    perfEnd("TeleportToPlayer")
end

-- ========== ANTI-AFK SYSTEM ==========
local function startAntiAFK()
    task.spawn(function()
        while state.antiAFK do
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                -- Small random movement
                local hrp = player.Character.HumanoidRootPart
                local randomOffset = Vector3.new(
                    math.random(-2, 2),
                    0,
                    math.random(-2, 2)
                )
                hrp.CFrame = hrp.CFrame + randomOffset
            end
            task.wait(math.random(45, 90)) -- Every 45-90 seconds
        end
    end)
    logInfo("STABILITY", "‚úÖ Anti-AFK enabled")
end

-- ========== GUI: FISHING TAB ==========
if Tabs["Fishing"] then
    Tabs["Fishing"]:Label("üé£ Auto Fishing System (Perfect Mode)")
    
    pcall(function()
        Tabs["Fishing"]:Toggle({
            Name = "Enable Auto Fishing",
            Default = false,
            Callback = function(v)
                state.autoFishing = v
                logInfo("GUI", "Auto Fishing:", tostring(v))
                if v then startFishing() end
            end
        })
    end)
    
    Tabs["Fishing"]:Label("‚ö° Ultra-fast cast & catch with no delay")
end

-- ========== GUI: SELLING TAB ==========
if Tabs["Selling"] then
    Tabs["Selling"]:Label("üí∞ Smart Selling System")
    
    Tabs["Selling"]:Label("üõ°Ô∏è Filter Fish (Don't Sell)")
    
    -- Checkbox for each tier
    local tiers = {"Secret", "Mythic", "Legendary", "Epic", "Rare"}
    for _, tier in ipairs(tiers) do
        pcall(function()
            Tabs["Selling"]:Toggle({
                Name = "‚òê " .. tier,
                Default = false,
                Callback = function(v)
                    state.filterRare[tier] = v
                    logInfo("GUI", tier .. " Filter:", tostring(v))
                end
            })
        end)
    end
    
    Tabs["Selling"]:Label("üíµ Selling Actions")
    
    pcall(function()
        Tabs["Selling"]:Button({
            Name = "üíµ Manual Sell (Safe)",
            Callback = function()
                sellFish(true)
            end
        })
    end)
    
    pcall(function()
        Tabs["Selling"]:Toggle({
            Name = "Auto Sell Every 30s",
            Default = false,
            Callback = function(v)
                state.autoSell = v
                logInfo("GUI", "Auto Sell:", tostring(v))
                if v then
                    task.spawn(function()
                        while state.autoSell do
                            task.wait(30)
                            if state.autoSell then
                                sellFish(false)
                            end
                        end
                    end)
                end
            end
        })
    end)
end

-- ========== GUI: TRAVEL TAB ==========
if Tabs["Travel"] then
    Tabs["Travel"]:Label("üè™ Fishing Merchant")
    
    -- NPCs in exact order
    for _, npc in ipairs(NPCS_ORDER) do
        pcall(function()
            Tabs["Travel"]:Button({
                Name = "‚Üí " .. npc.name,
                Callback = function()
                    teleportTo(npc.pos, npc.name)
                end
            })
        end)
    end
    
    Tabs["Travel"]:Label("üó∫Ô∏è Island Teleports")
    
    -- Islands in exact order
    for _, island in ipairs(ISLANDS_ORDER) do
        pcall(function()
            Tabs["Travel"]:Button({
                Name = "üèùÔ∏è " .. island.name,
                Callback = function()
                    teleportTo(island.pos, island.name)
                end
            })
        end)
    end
    
    Tabs["Travel"]:Label("üë§ NPC Player In-Game")
    
    -- Textbox for username input
    pcall(function()
        Tabs["Travel"]:Textbox({
            Name = "Enter Player Username",
            Default = "",
            Placeholder = "Type username here...",
            Callback = function(text)
                state.playerTeleportUsername = text
                logInfo("GUI", "Username set:", text)
            end
        })
    end)
    
    -- Button to teleport
    pcall(function()
        Tabs["Travel"]:Button({
            Name = "üöÄ Teleport to Player",
            Callback = function()
                teleportToPlayer(state.playerTeleportUsername)
            end
        })
    end)
end

-- ========== GUI: STABILITY TAB ==========
if Tabs["Stability"] then
    Tabs["Stability"]:Label("üß† Stability & Safety")
    
    pcall(function()
        Tabs["Stability"]:Toggle({
            Name = "Anti-AFK Protection",
            Default = false,
            Callback = function(v)
                state.antiAFK = v
                if v then startAntiAFK() end
            end
        })
    end)
    
    pcall(function()
        Tabs["Stability"]:Button({
            Name = "üîÑ Restart Fishing",
            Callback = function()
                state.autoFishing = false
                task.wait(1)
                state.autoFishing = true
                startFishing()
                logInfo("STABILITY", "Fishing restarted")
            end
        })
    end)
    
    pcall(function()
        Tabs["Stability"]:Button({
            Name = "‚õî Emergency Stop All",
            Callback = function()
                state.autoFishing = false
                state.autoSell = false
                state.antiAFK = false
                logWarn("STABILITY", "üö® ALL SYSTEMS STOPPED")
            end
        })
    end)
end

-- ‚úÖ Initialization Complete
logInfo("INIT", "‚úÖ‚úÖ‚úÖ FishItHub v4.0 Ultimate LOADED ‚úÖ‚úÖ‚úÖ")
logInfo("INIT", "All systems ready! Happy fishing! üé£")

-- END OF SCRIPT
