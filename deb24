-- FishItHub v5.1 Ultimate - Fixed Loading
-- Wrapped in pcall untuk error handling
local success, err = pcall(function()

print("[FishItHub] üîÑ Loading v5.1 Ultimate...")

-- ========== LOGGING SYSTEM ==========
local LOG_LEVELS = {DEBUG = 1, INFO = 2, WARN = 3, ERROR = 4}
local logHistory = {}
local MAX_LOG_HISTORY = 500
local currentLogLevel = LOG_LEVELS.INFO

local function log(level, category, ...)
    if level < currentLogLevel then return end
    local args = {...}
    local message = table.concat(args, " ")
    local prefix = "[FishItHub]["..category.."]"
    
    table.insert(logHistory, {
        timestamp = tick(),
        level = level,
        category = category,
        message = message
    })
    if #logHistory > MAX_LOG_HISTORY then table.remove(logHistory, 1) end
    
    if level == LOG_LEVELS.INFO then print(prefix, "‚ÑπÔ∏è", message)
    elseif level == LOG_LEVELS.WARN then warn(prefix, "‚ö†Ô∏è", message)
    elseif level == LOG_LEVELS.ERROR then warn(prefix, "‚ùå", message) end
end

local function logInfo(cat, ...) log(LOG_LEVELS.INFO, cat, ...) end
local function logWarn(cat, ...) log(LOG_LEVELS.WARN, cat, ...) end
local function logError(cat, ...) log(LOG_LEVELS.ERROR, cat, ...) end

-- Statistics
local stats = {
    fishCaught = 0,
    rareCaught = 0,
    totalCycles = 0,
    rareFish = {}
}

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local StarterGui = game:GetService("StarterGui")

-- Load Kavo UI Library
logInfo("INIT", "Loading Kavo UI Library...")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

if not Library then
    logError("INIT", "Failed to load Kavo library")
    return
end
logInfo("INIT", "‚úÖ Kavo UI Library loaded")

-- Create GUI
local Window = Library.CreateLib("FishItHub v5.1", "DarkTheme")
if not Window then
    logError("INIT", "Failed to create window")
    return
end

-- Create Tabs
local TabFishing = Window:NewTab("üé£ Fishing")
local TabSelling = Window:NewTab("üí∞ Selling")
local TabPlayer = Window:NewTab("üë§ Player")
local TabTravel = Window:NewTab("üó∫Ô∏è Travel")
local TabEvents = Window:NewTab("üé™ Events")
local TabSpoof = Window:NewTab("üé≠ Spoof")
local TabStability = Window:NewTab("üõ°Ô∏è Stability")

-- Create Sections
local FishingSection = TabFishing:NewSection("Auto Fishing")
local FishingControlSection = TabFishing:NewSection("Fishing Controls")
local SellSection = TabSelling:NewSection("Smart Selling")
local PlayerMovementSection = TabPlayer:NewSection("Movement")
local PlayerAbilitySection = TabPlayer:NewSection("Abilities")
local PlayerActionSection = TabPlayer:NewSection("Actions")
local NPCSection = TabTravel:NewSection("Fishing Merchants")
local IslandSection = TabTravel:NewSection("Island Teleports")
local PlayerTeleportSection = TabTravel:NewSection("Teleport to Player")
local EventSection = TabEvents:NewSection("Admin Events")
local SpoofSection = TabSpoof:NewSection("Equipment Spoof")
local StabilitySection = TabStability:NewSection("Stability & Safety")

logInfo("GUI", "‚úÖ All tabs created")

-- Find Remotes
local net
pcall(function()
    net = ReplicatedStorage:WaitForChild("Packages", 5)
        :WaitForChild("_Index", 5)
        :WaitForChild("sleitnick_net@0.2.0", 5)
        :WaitForChild("net", 5)
end)

if not net then
    local pk = ReplicatedStorage:FindFirstChild("Packages")
    if pk then
        local idx = pk:FindFirstChild("_Index")
        if idx then
            for _, v in ipairs(idx:GetChildren()) do
                if string.find(v.Name, "sleitnick_net") then
                    net = v:FindFirstChild("net")
                    if net then break end
                end
            end
        end
    end
end

if not net then
    logError("NET", "Cannot find net folder")
    return
end

logInfo("NET", "‚úÖ Found net folder")

-- Get Remotes
local function getRemote(name)
    local found = net:FindFirstChild(name, true)
    if found then logInfo("REMOTE", "‚úÖ", name)
    else logWarn("REMOTE", "‚ö†Ô∏è Missing:", name) end
    return found
end

local RF_Charge = getRemote("RF/ChargeFishingRod")
local RF_RequestMini = getRemote("RF/RequestFishingMinigameStarted")
local RE_Completed = getRemote("RE/FishingCompleted")
local RE_EquipTool = getRemote("RE/EquipToolFromHotbar")
local RF_SellAll = getRemote("RF/SellAllItems")
local RE_EquipRod = getRemote("RE/EquipItem")
local RE_EquipBait = getRemote("RE/EquipBait")
local RE_EquipRodSkin = getRemote("RE/EquipRodSkin")
local RE_FishCaught = getRemote("RE/FishCaught")

-- Fish Database
local FISH_DATABASE = {
    Secret = {"Crystal Crab", "Orca", "Megalodon", "Worm Fish", "Ghost Shark", "Lochness Monster", "Monster Shark", "Eerie Shark", "Armored Shark", "Great Whale", "Kraken", "Queen Crab", "Robot Kraken", "King Crab", "Giant Squid", "Panther Eel"},
    Mythic = {"Dotted Stingray", "Manta Ray", "Hammerhead Shark", "Swordfish Shark", "Loggerhead Turtle", "Prismy Seahorse", "Blueflame Ray", "Magma Shark", "Hawks Turtle", "Abyss Seahorse", "Brown Megalodon", "Thresher Shark", "Blob Fish"},
    Legendary = {"Lined Cardinal Fish", "Yellowfish Tuna", "Chrome Tuna", "Bumblebee Grouper", "Lobster", "Lavafin Tuna", "Starjam Tang", "Greenbee Grouper", "Blue Lobster", "Enchanted Angelfish", "Magic Tang", "Axolotl", "Deep Sea Crab"},
    Epic = {"Dorhey Tang", "Unicorn Tang", "Cow Clownfish", "Moorish Idol", "Sushi Cardinal", "Longnose Butterfly", "Firecoal Damsel", "Panther Grouper", "Domino Damsel", "Astra Damsel", "Pufferfish", "Vampire Squid", "Angler Fish"},
    Rare = {"Barracuda Fish", "Korean Angelfish", "Ballina Angelfish", "Frog", "Darwin Clownfish", "Jewel Tang", "Candy Butterfly", "Fire Goby", "Kau Cardinal", "Rockform Cardianl", "Volsail Tang", "White Clownfish", "Scissortail Dartfish", "Charmed Tang", "Catfish", "Sheepshead Fish", "Coney Fish", "Jellyfish"}
}

-- State
local state = {
    autoFishing = false,
    semiMode = false,
    tapSpeed = 50,
    fishingDelay = {equip = 0.5, charge = 0.8, cast = 1.2, bite = 5.0, catch = 0.7, rest = 2.5},
    autoSell = false,
    antiAFK = false,
    filterRare = {Secret = false, Mythic = false, Legendary = false, Epic = false, Rare = false},
    fishingThread = nil,
    tapThread = nil,
    isTapping = false,
    selectedPlayer = nil,
    spoofRod = "Ghostfinn Rod",
    spoofBait = "Singularity Bait",
    spoofSkin = "Default",
    enableSpoof = false,
    infiniteJump = false,
    infiniteJumpConnection = nil,
    radarEnabled = false,
    divingGearEnabled = false,
    divingGearConnection = nil,
    originalWalkSpeed = 16,
    originalJumpPower = 50
}

-- Rare Fish Detection
local function getFishTier(fishName)
    if not fishName then return nil end
    local fishStr = tostring(fishName)
    for tier, fishList in pairs(FISH_DATABASE) do
        for _, fish in ipairs(fishList) do
            if fishStr == fish or string.lower(fishStr) == string.lower(fish) then
                return tier
            end
        end
    end
    return nil
end

local function alertRareCatch(fishName, tier)
    stats.rareCaught = stats.rareCaught + 1
    table.insert(stats.rareFish, {name = fishName, tier = tier, time = os.date("%H:%M:%S")})
    logInfo("RARE", "üåü RARE CATCH:", fishName, "["..tier.."]")
    StarterGui:SetCore("SendNotification", {Title = "üåü RARE FISH!", Text = fishName .. " [" .. tier .. "]", Duration = 5})
end

-- Spoof System
local function applyFullSpoof()
    if not state.enableSpoof then return end
    logInfo("SPOOF", "üé≠ Applying spoof...")
    pcall(function() if RE_EquipRod then RE_EquipRod:FireServer(state.spoofRod) end end)
    task.wait(0.15)
    pcall(function() if RE_EquipBait then RE_EquipBait:FireServer(state.spoofBait) end end)
    task.wait(0.15)
    if state.spoofSkin ~= "Default" then
        pcall(function() if RE_EquipRodSkin then RE_EquipRodSkin:FireServer(state.spoofSkin) end end)
    end
    logInfo("SPOOF", "‚úÖ Spoof applied")
end

-- Auto Tap System
local function stopAutoTap()
    state.isTapping = false
    task.wait(0.1)
    state.tapThread = nil
    logInfo("TAP", "üõë Auto tap stopped")
end

local function startAutoTap()
    if state.tapThread then return end
    logInfo("TAP", "üñ±Ô∏è Starting auto tap:", state.tapSpeed, "ms")
    state.isTapping = true
    
    state.tapThread = task.spawn(function()
        while state.isTapping and state.semiMode do
            pcall(function()
                local screenSize = workspace.CurrentCamera.ViewportSize
                local x, y = screenSize.X / 2, screenSize.Y / 2
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 0)
                task.wait(0.02)
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 0)
            end)
            task.wait(state.tapSpeed / 1000)
        end
        state.tapThread = nil
        state.isTapping = false
    end)
end

-- Unstuck Fishing
local function unstuckFishing()
    logInfo("UNSTUCK", "üîß Executing unstuck + restart...")
    local wasAutoFishing = state.autoFishing
    state.autoFishing = false
    state.isTapping = false
    task.wait(0.3)
    
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    
    pcall(function()
        local character = player.Character
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        
        -- Stop animations
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                    track:Stop(0)
                    track:Destroy()
                end
            end
        end
        task.wait(0.3)
        
        -- Remove tools
        if humanoid then humanoid:UnequipTools() end
        for _, tool in ipairs(character:GetChildren()) do
            if tool:IsA("Tool") then tool:Destroy() end
        end
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            if tool:IsA("Tool") then tool:Destroy() end
        end
        task.wait(0.5)
        
        -- Reset state
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Landed)
            task.wait(0.1)
            humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
        
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.Velocity = Vector3.new(0, 0, 0)
            hrp.RotVelocity = Vector3.new(0, 0, 0)
        end
        task.wait(0.5)
        
        logInfo("UNSTUCK", "‚úÖ Complete")
        
        if wasAutoFishing then
            logInfo("UNSTUCK", "üîÑ Restarting fishing...")
            task.wait(1)
            state.autoFishing = true
            startFishing()
        end
    end)
    
    StarterGui:SetCore("SendNotification", {Title = "‚úÖ Unstuck Complete", Text = "Fishing cleared!", Duration = 3})
end

-- Fishing Logic
local function startFishing()
    if state.fishingThread then return end
    logInfo("FISHING", "üé£ Starting", state.semiMode and "SEMI MODE" or "FULL AUTO")
    
    if state.enableSpoof then applyFullSpoof() end
    
    state.fishingThread = task.spawn(function()
        local cycle = 0
        while state.autoFishing do
            cycle = cycle + 1
            stats.totalCycles = cycle
            
            pcall(function()
                local d = state.fishingDelay
                
                -- Equip
                if RE_EquipTool then RE_EquipTool:FireServer(1) end
                task.wait(d.equip)
                
                -- Charge
                if RF_Charge then pcall(function() RF_Charge:InvokeServer(workspace:GetServerTimeNow()) end) end
                task.wait(d.charge)
                
                -- Cast
                task.wait(d.cast)
                
                -- Minigame
                if state.semiMode then
                    startAutoTap()
                    task.wait(d.bite)
                    stopAutoTap()
                else
                    if RF_RequestMini then pcall(function() RF_RequestMini:InvokeServer(-1.2, 1) end) end
                    task.wait(d.bite)
                end
                
                -- Complete
                if RE_Completed then
                    pcall(function()
                        RE_Completed:FireServer()
                        stats.fishCaught = stats.fishCaught + 1
                    end)
                end
                task.wait(d.catch)
                
                -- Rest
                task.wait(d.rest)
            end)
        end
        
        stopAutoTap()
        state.fishingThread = nil
        logInfo("FISHING", "üõë Stopped")
    end)
end

-- Selling
local function sellFish()
    local player = Players.LocalPlayer
    if not player then return end
    
    local protectedFish = {}
    pcall(function()
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            for _, item in ipairs(backpack:GetChildren()) do
                local tier = getFishTier(item.Name)
                if tier and state.filterRare[tier] then
                    table.insert(protectedFish, item.Name)
                end
            end
        end
    end)
    
    if #protectedFish == 0 then
        if RF_SellAll then pcall(function() RF_SellAll:InvokeServer() end) end
        logInfo("SELL", "‚úÖ Sold")
    else
        logInfo("SELL", "Protected fish found, skipping")
    end
end

-- Player Movement
local function setWalkSpeed(speed)
    local player = Players.LocalPlayer
    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid.WalkSpeed = speed end
    end
end

local function setJumpPower(power)
    local player = Players.LocalPlayer
    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid.JumpPower = power end
    end
end

-- Abilities
local function toggleInfiniteJump()
    state.infiniteJump = not state.infiniteJump
    if state.infiniteJump then
        if state.infiniteJumpConnection then state.infiniteJumpConnection:Disconnect() end
        state.infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
            if state.infiniteJump then
                local player = Players.LocalPlayer
                if player and player.Character then
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Swimming then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end
        end)
        StarterGui:SetCore("SendNotification", {Title = "‚úÖ Infinite Jump ON", Text = "Enabled!", Duration = 2})
    else
        if state.infiniteJumpConnection then
            state.infiniteJumpConnection:Disconnect()
            state.infiniteJumpConnection = nil
        end
        StarterGui:SetCore("SendNotification", {Title = "‚ùå Infinite Jump OFF", Text = "Disabled!", Duration = 2})
    end
end

local function toggleDivingGear()
    state.divingGearEnabled = not state.divingGearEnabled
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    
    if state.divingGearEnabled then
        if state.divingGearConnection then state.divingGearConnection:Disconnect() end
        state.divingGearConnection = RunService.Heartbeat:Connect(function()
            if state.divingGearEnabled then
                local character = player.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid.Health < humanoid.MaxHealth then
                        humanoid.Health = humanoid.MaxHealth
                    end
                    local ff = character:FindFirstChildOfClass("ForceField")
                    if not ff then
                        ff = Instance.new("ForceField")
                        ff.Visible = false
                        ff.Parent = character
                    end
                end
            end
        end)
        StarterGui:SetCore("SendNotification", {Title = "‚úÖ Diving God Mode ON", Text = "Infinite health!", Duration = 2})
    else
        if state.divingGearConnection then
            state.divingGearConnection:Disconnect()
            state.divingGearConnection = nil
        end
        local character = player.Character
        if character then
            local ff = character:FindFirstChildOfClass("ForceField")
            if ff then ff:Destroy() end
        end
        StarterGui:SetCore("SendNotification", {Title = "‚ùå Diving God Mode OFF", Text = "Disabled!", Duration = 2})
    end
end

-- Teleport
local NPCS = {
    {name = "Rods Here!", pos = Vector3.new(146.81, 20.47, 2837.95)},
    {name = "Bobbers", pos = Vector3.new(103.67, 17.28, 2867.04)},
    {name = "Skin Crates", pos = Vector3.new(78.28, 17.28, 2865.28)},
    {name = "Sell Here!", pos = Vector3.new(44.10, 17.28, 2867.51)},
    {name = "Utility Store", pos = Vector3.new(-43.83, 20.46, 2874.31)},
    {name = "Traveling Merchant", pos = Vector3.new(-128.38, 2.58, 2767.39)}
}

local ISLANDS = {
    {name = "Fisherman Island", pos = Vector3.new(122.96, 3.37, 2784.57)},
    {name = "Ancient Jungle", pos = Vector3.new(1235.60, 7.97, -123.50)},
    {name = "Lost Isle", pos = Vector3.new(-3779.84, -135.07, -975.06)},
    {name = "Esoteric Depths", pos = Vector3.new(2954.65, -1302.73, 1529.24)},
    {name = "Crater Island", pos = Vector3.new(993.45, 2.49, 5012.44)},
    {name = "Tropical Grove", pos = Vector3.new(-2049.86, 6.27, 3655.13)},
    {name = "Coral Reefs", pos = Vector3.new(-2730.52, 4.00, 2174.49)},
    {name = "Kohana Volcano", pos = Vector3.new(-598.58, 59.00, 108.43)}
}

local EVENTS = {
    {name = "Meteor Rain", pos = Vector3.new(500, 100, 500)},
    {name = "Ghost Worm", pos = Vector3.new(-1000, 50, -1000)},
    {name = "Super Mutated", pos = Vector3.new(1500, 75, 1500)},
    {name = "Radiant", pos = Vector3.new(-2000, 100, 2000)},
    {name = "Shark Hunt", pos = Vector3.new(3000, 25, -3000)}
}

local function teleportTo(pos, name)
    local player = Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
        logInfo("TELEPORT", "‚úÖ", name)
    end
end

local function getPlayerList()
    local list = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= Players.LocalPlayer then table.insert(list, p.Name) end
    end
    return list
end

local function teleportToPlayer(name)
    local target = Players:FindFirstChild(name)
    if not target or not target.Character then return end
    local hrp = target.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local player = Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = hrp.CFrame * CFrame.new(0, 0, 3)
        StarterGui:SetCore("SendNotification", {Title = "‚úÖ Teleported", Text = "To " .. name, Duration = 2})
    end
end

-- Anti-AFK
local function startAntiAFK()
    task.spawn(function()
        while state.antiAFK do
            local player = Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = player.Character.HumanoidRootPart
                hrp.CFrame = hrp.CFrame + Vector3.new(math.random(-2, 2), 0, math.random(-2, 2))
            end
            task.wait(math.random(45, 90))
        end
    end)
end

-- GUI Toggle
local guiVisible = true
local function toggleGUI()
    guiVisible = not guiVisible
    if Window and Window.Main then
        Window.Main.Visible = guiVisible
        StarterGui:SetCore("SendNotification", {
            Title = guiVisible and "üëÅÔ∏è Menu Shown" or "üôà Menu Hidden",
            Text = "Press INSERT to toggle",
            Duration = 2
        })
    end
end

UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.Insert then
        toggleGUI()
    end
end)

-- ========== BUILD GUI ==========

-- Fishing Tab
FishingSection:NewToggle("Enable Auto Fishing", "Start/stop fishing", function(v)
    state.autoFishing = v
    if v then startFishing() else stopAutoTap() end
end)

FishingSection:NewToggle("Semi Mode (Auto Tap)", "Use auto tap for minigame", function(v)
    state.semiMode = v
    StarterGui:SetCore("SendNotification", {
        Title = v and "üéÆ Semi Mode ON" or "ü§ñ Full Auto",
        Text = v and "Auto tap enabled!" or "Instant complete!",
        Duration = 2
    })
end)

FishingControlSection:NewSlider("Tap Speed: 50ms", "Tap speed (0-500ms)", 500, 0, function(v)
    state.tapSpeed = v
end)

FishingControlSection:NewSlider("Equip: 0.5s", "Equip delay", 2, 0.1, function(v)
    state.fishingDelay.equip = v
end)

FishingControlSection:NewSlider("Charge: 0.8s", "Charge delay", 2, 0.1, function(v)
    state.fishingDelay.charge = v
end)

FishingControlSection:NewSlider("Cast: 1.2s", "Cast wait", 3, 0.2, function(v)
    state.fishingDelay.cast = v
end)

FishingControlSection:NewSlider("Bite: 5.0s", "Bite/minigame duration", 10, 1, function(v)
    state.fishingDelay.bite = v
end)

FishingControlSection:NewSlider("Catch: 0.7s", "Catch delay", 2, 0.1, function(v)
    state.fishingDelay.catch = v
end)

FishingControlSection:NewSlider("Rest: 2.5s", "Rest between casts", 5, 0.5, function(v)
    state.fishingDelay.rest = v
end)

FishingControlSection:NewButton("üîß Unstuck & Restart", "Fix stuck + restart", function()
    unstuckFishing()
end)

-- Selling Tab
SellSection:NewLabel("üõ°Ô∏è Filter (Don't Sell)")

SellSection:NewToggle("Secret", "Don't sell Secret", function(v) state.filterRare.Secret = v end)
SellSection:NewToggle("Mythic", "Don't sell Mythic", function(v) state.filterRare.Mythic = v end)
SellSection:NewToggle("Legendary", "Don't sell Legendary", function(v) state.filterRare.Legendary = v end)
SellSection:NewToggle("Epic", "Don't sell Epic", function(v) state.filterRare.Epic = v end)
SellSection:NewToggle("Rare", "Don't sell Rare", function(v) state.filterRare.Rare = v end)

SellSection:NewButton("üíµ Manual Sell", "Sell now", function() sellFish() end)

SellSection:NewToggle("Auto Sell (30s)", "Auto sell every 30s", function(v)
    state.autoSell = v
    if v then
        task.spawn(function()
            while state.autoSell do
                task.wait(30)
                if state.autoSell then sellFish() end
            end
        end)
    end
end)

-- Player Tab
PlayerMovementSection:NewSlider("WalkSpeed", "16-200", 200, 16, function(v) setWalkSpeed(v) end)
PlayerMovementSection:NewSlider("JumpPower", "50-300", 300, 50, function(v) setJumpPower(v) end)
PlayerMovementSection:NewButton("üîÑ Reset Movement", "Reset to default", function()
    setWalkSpeed(16)
    setJumpPower(50)
end)

PlayerAbilitySection:NewButton("‚ôæÔ∏è Toggle Infinite Jump", "On/Off", function() toggleInfiniteJump() end)
PlayerAbilitySection:NewButton("ü§ø Toggle Diving God Mode", "Infinite health underwater", function() toggleDivingGear() end)

PlayerActionSection:NewButton("üíÄ Respawn", "Respawn character", function()
    local player = Players.LocalPlayer
    if player and player.Character then
        player.Character:BreakJoints()
    end
end)

-- Travel Tab
for _, npc in ipairs(NPCS) do
    NPCSection:NewButton(npc.name, "Teleport", function() teleportTo(npc.pos, npc.name) end)
end

for _, island in ipairs(ISLANDS) do
    IslandSection:NewButton(island.name, "Teleport", function() teleportTo(island.pos, island.name) end)
end

PlayerTeleportSection:NewDropdown("Select Player", "Choose player", getPlayerList(), function(v)
    state.selectedPlayer = v
end)

PlayerTeleportSection:NewButton("üöÄ Teleport to Player", "Go to player", function()
    if state.selectedPlayer then
        teleportToPlayer(state.selectedPlayer)
    else
        StarterGui:SetCore("SendNotification", {Title = "‚ö†Ô∏è No Player", Text = "Select player first!", Duration = 2})
    end
end)

-- Events Tab
EventSection:NewLabel("üé™ Admin Event Locations")
for _, event in ipairs(EVENTS) do
    EventSection:NewButton(event.name, "Teleport", function() teleportTo(event.pos, event.name) end)
end

-- Spoof Tab
SpoofSection:NewLabel("‚ú® Spoof equipment effects")

SpoofSection:NewToggle("Enable Spoof", "Activate spoof", function(v)
    state.enableSpoof = v
    if v then
        applyFullSpoof()
        StarterGui:SetCore("SendNotification", {Title = "‚úÖ Spoof ON", Text = "Equipment spoofed!", Duration = 2})
    end
end)

SpoofSection:NewDropdown("Rod", "Select rod", 
    {"Ghostfinn Rod", "Rod of the Depths", "Trident Rod", "Kings Rod", "Mythical Rod", "No-Life Rod", "Fast Rod"}, 
    function(v)
        state.spoofRod = v
        if state.enableSpoof then task.wait(0.2) applyFullSpoof() end
    end
)

SpoofSection:NewDropdown("Bait", "Select bait",
    {"Singularity Bait", "Night Shrimp", "Truffle Worm", "Minnow", "Squid", "Fish Head", "Coral"},
    function(v)
        state.spoofBait = v
        if state.enableSpoof then task.wait(0.2) applyFullSpoof() end
    end
)

SpoofSection:NewDropdown("Skin", "Select skin",
    {"Default", "Aurora Rod Skin", "Twilight Rod Skin", "Void Rod Skin", "Solar Rod Skin", "Lunar Rod Skin"},
    function(v)
        state.spoofSkin = v
        if state.enableSpoof then task.wait(0.2) applyFullSpoof() end
    end
)

SpoofSection:NewButton("üîÑ Reapply Spoof", "Refresh equipment", function()
    if state.enableSpoof then
        applyFullSpoof()
        StarterGui:SetCore("SendNotification", {Title = "üîÑ Refreshed", Text = "Spoof reapplied!", Duration = 2})
    else
        StarterGui:SetCore("SendNotification", {Title = "‚ö†Ô∏è Enable First", Text = "Turn on spoof toggle!", Duration = 2})
    end
end)

-- Stability Tab
StabilitySection:NewToggle("Anti-AFK", "Prevent kick", function(v)
    state.antiAFK = v
    if v then startAntiAFK() end
end)

StabilitySection:NewButton("‚õî Emergency Stop", "Stop all", function()
    state.autoFishing = false
    state.semiMode = false
    state.autoSell = false
    state.antiAFK = false
    stopAutoTap()
    StarterGui:SetCore("SendNotification", {Title = "‚õî STOPPED", Text = "All systems stopped!", Duration = 2})
end)

StabilitySection:NewButton("üö® Full Reset", "Reset everything", function()
    state.autoFishing = false
    state.semiMode = false
    state.autoSell = false
    state.antiAFK = false
    state.enableSpoof = false
    stopAutoTap()
    stats.fishCaught = 0
    stats.rareCaught = 0
    stats.totalCycles = 0
    StarterGui:SetCore("SendNotification", {Title = "üö® RESET", Text = "Everything cleared!", Duration = 2})
end)

StabilitySection:NewLabel("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
StabilitySection:NewLabel("üîë INSERT = Hide/Show Menu")

-- Fish Caught Event
if RE_FishCaught then
    pcall(function()
        RE_FishCaught.OnClientEvent:Connect(function(fishData)
            if fishData and fishData.Name then
                local tier = getFishTier(tostring(fishData.Name))
                if tier then alertRareCatch(tostring(fishData.Name), tier) end
            end
        end)
    end)
end

-- Success notification
logInfo("INIT", "‚úÖ‚úÖ‚úÖ FishItHub v5.1 LOADED ‚úÖ‚úÖ‚úÖ")
logInfo("INIT", "")
logInfo("INIT", "üé£ FEATURES:")
logInfo("INIT", "  ‚úÖ Full Auto & Semi Mode fishing")
logInfo("INIT", "  ‚úÖ Auto tap system (0-500ms)")
logInfo("INIT", "  ‚úÖ Smart selling with filters")
logInfo("INIT", "  ‚úÖ Unstuck & restart combined")
logInfo("INIT", "  ‚úÖ Diving god mode (no gear needed)")
logInfo("INIT", "  ‚úÖ Equipment spoof system")
logInfo("INIT", "  ‚úÖ Teleports & player abilities")
logInfo("INIT", "")
logInfo("INIT", "‚öôÔ∏è DEFAULT SETTINGS:")
logInfo("INIT", "  Tap: 50ms | Equip: 0.5s | Charge: 0.8s")
logInfo("INIT", "  Cast: 1.2s | Bite: 5.0s | Catch: 0.7s | Rest: 2.5s")
logInfo("INIT", "")
logInfo("INIT", "üîë HOTKEY: INSERT = Hide/Show Menu")
logInfo("INIT", "")

StarterGui:SetCore("SendNotification", {
    Title = "‚úÖ FishItHub v5.1 Ready!",
    Text = "Press INSERT to hide menu | All bugs fixed!",
    Duration = 5
})

end) -- End of pcall

-- Error handling
if not success then
    warn("[FishItHub] ‚ùå LOADING ERROR:")
    warn(err)
    warn("")
    warn("üí° SOLUTIONS:")
    warn("1. Make sure you're in the correct game")
    warn("2. Try executing again")
    warn("3. Check your executor supports all features")
    warn("4. Restart Roblox if issue persists")
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "‚ùå FishItHub Load Failed",
        Text = "Check console (F9) for details",
        Duration = 10
    })
end
