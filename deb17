print("[FishItHub] üîÑ Loading v4.2 Ultimate (Fixed & Enhanced)...")

-- ========== ENHANCED LOGGING SYSTEM ==========
local LOG_LEVELS = {DEBUG = 1, INFO = 2, WARN = 3, ERROR = 4, CRITICAL = 5}
local logHistory = {}
local MAX_LOG_HISTORY = 150
local currentLogLevel = LOG_LEVELS.DEBUG

local function addToHistory(level, category, message)
    table.insert(logHistory, {
        timestamp = tick(),
        level = level,
        category = category,
        message = message,
        time = os.date("%H:%M:%S")
    })
    if #logHistory > MAX_LOG_HISTORY then table.remove(logHistory, 1) end
end

local function safeConcat(...)
    local args = {...}
    local result = {}
    for i, v in ipairs(args) do
        table.insert(result, tostring(v))
    end
    return table.concat(result, " ")
end

local function log(level, category, ...)
    if level < currentLogLevel then return end
    local message = safeConcat(...)
    local prefix = "[FishItHub]["..category.."]"
    addToHistory(level, category, message)
    
    if level == LOG_LEVELS.DEBUG then print(prefix, "üîç", message)
    elseif level == LOG_LEVELS.INFO then print(prefix, "‚ÑπÔ∏è", message)
    elseif level == LOG_LEVELS.WARN then warn(prefix, "‚ö†Ô∏è", message)
    elseif level == LOG_LEVELS.ERROR then warn(prefix, "‚ùå", message)
    elseif level == LOG_LEVELS.CRITICAL then warn(prefix, "üî• CRITICAL:", message) end
end

local function logInfo(cat, ...) log(LOG_LEVELS.INFO, cat, ...) end
local function logWarn(cat, ...) log(LOG_LEVELS.WARN, cat, ...) end
local function logError(cat, ...) log(LOG_LEVELS.ERROR, cat, ...) end
local function logDebug(cat, ...) log(LOG_LEVELS.DEBUG, cat, ...) end

-- Performance Tracker
local perfTracker = {}
local function perfStart(name)
    perfTracker[name] = {start = tick(), count = (perfTracker[name] and perfTracker[name].count or 0) + 1}
end
local function perfEnd(name)
    if not perfTracker[name] then return end
    local elapsed = tick() - perfTracker[name].start
    perfTracker[name].lastDuration = elapsed
    perfTracker[name].totalTime = (perfTracker[name].totalTime or 0) + elapsed
    if elapsed > 5 then logWarn("PERF", name, "SLOW:", string.format("%.2f", elapsed).."s") end
    return elapsed
end

-- Statistics
local stats = {
    fishCaught = 0,
    rareCaught = 0,
    totalCycles = 0,
    errorCount = {fishing = 0, selling = 0, teleport = 0, init = 0},
    lastError = {},
    rareFish = {}
}

-- üß© Load Kavo UI Library
perfStart("LoadLibrary")
local Library
local success = pcall(function()
    Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
end)
perfEnd("LoadLibrary")

if not success or not Library then
    logError("INIT", "Failed to load Kavo library")
    return
end
logInfo("INIT", "‚úÖ Kavo UI Library loaded")

-- ü™ü Create GUI (Using Kavo)
local Window = Library.CreateLib("FishItHub v4.2 Ultimate", "DarkTheme")

if not Window then
    logError("INIT", "Failed to create window")
    return
end

-- üóÇÔ∏è Create Tabs
local TabFishing = Window:NewTab("üé£ Fishing")
local TabSelling = Window:NewTab("üí∞ Selling")
local TabTravel = Window:NewTab("üó∫Ô∏è Travel")
local TabSpoof = Window:NewTab("üé≠ Spoof")
local TabStability = Window:NewTab("üõ°Ô∏è Stability")
local TabDebug = Window:NewTab("üêõ Debug")

-- Create Sections
local FishingSection = TabFishing:NewSection("Auto Fishing")
local SellSection = TabSelling:NewSection("Smart Selling")
local NPCSection = TabTravel:NewSection("Fishing Merchants")
local IslandSection = TabTravel:NewSection("Island Teleports")
local PlayerSection = TabTravel:NewSection("Teleport to Player")
local SpoofSection = TabSpoof:NewSection("Equipment Spoof")
local StabilitySection = TabStability:NewSection("Stability & Safety")
local ControlSection = TabStability:NewSection("Menu Controls")
local DebugSection = TabDebug:NewSection("Debug Controls")
local LogSection = TabDebug:NewSection("Recent Logs")
local StatsSection = TabDebug:NewSection("Statistics")

logInfo("GUI", "‚úÖ All tabs created")

-- üåê Find Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local net

pcall(function()
    net = ReplicatedStorage:WaitForChild("Packages", 5)
        :WaitForChild("_Index", 5)
        :WaitForChild("sleitnick_net@0.2.0", 5)
        :WaitForChild("net", 5)
end)

if not net then
    local pk = ReplicatedStorage:FindFirstChild("Packages")
    if pk then
        local idx = pk:FindFirstChild("_Index")
        if idx then
            for _, v in ipairs(idx:GetChildren()) do
                if string.find(v.Name, "sleitnick_net") then
                    net = v:FindFirstChild("net")
                    if net then break end
                end
            end
        end
    end
end

if not net then
    logError("NET", "Cannot find net folder")
    return
end

logInfo("NET", "‚úÖ Found net folder")

-- üéØ Get Remotes
local function getRemote(name)
    local found = net:FindFirstChild(name, true)
    if found then logInfo("REMOTE", "‚úÖ", name)
    else logWarn("REMOTE", "‚ö†Ô∏è Missing:", name) end
    return found
end

local RF_Charge = getRemote("RF/ChargeFishingRod")
local RF_RequestMini = getRemote("RF/RequestFishingMinigameStarted")
local RE_Completed = getRemote("RE/FishingCompleted")
local RE_EquipTool = getRemote("RE/EquipToolFromHotbar")
local RF_SellAll = getRemote("RF/SellAllItems")
local RE_EquipRod = getRemote("RE/EquipItem")
local RE_EquipBait = getRemote("RE/EquipBait")
local RE_EquipRodSkin = getRemote("RE/EquipRodSkin")
local RE_FishCaught = getRemote("RE/FishCaught")

-- ========== FISH CATEGORIES DATABASE ==========
local FISH_DATABASE = {
    Secret = {
        "Crystal Crab", "Orca", "Megalodon", "Worm Fish", "Ghost Shark",
        "Lochness Monster", "Monster Shark", "Eerie Shark", "Armored Shark",
        "Great Whale", "Kraken", "Queen Crab", "Robot Kraken", "King Crab",
        "Giant Squid", "Panther Eel"
    },
    Mythic = {
        "Dotted Stingray", "Manta Ray", "Hammerhead Shark", "Swordfish Shark",
        "Loggerhead Turtle", "Prismy Seahorse", "Blueflame Ray", "Magma Shark",
        "Hawks Turtle", "Abyss Seahorse", "Brown Megalodon", "Thresher Shark",
        "Blob Fish"
    },
    Legendary = {
        "Lined Cardinal Fish", "Yellowfish Tuna", "Chrome Tuna", "Bumblebee Grouper",
        "Lobster", "Lavafin Tuna", "Starjam Tang", "Greenbee Grouper",
        "Blue Lobster", "Enchanted Angelfish", "Magic Tang", "Axolotl",
        "Deep Sea Crab"
    },
    Epic = {
        "Dorhey Tang", "Unicorn Tang", "Cow Clownfish", "Moorish Idol",
        "Sushi Cardinal", "Longnose Butterfly", "Firecoal Damsel", "Panther Grouper",
        "Domino Damsel", "Astra Damsel", "Pufferfish", "Vampire Squid",
        "Angler Fish"
    },
    Rare = {
        "Barracuda Fish", "Korean Angelfish", "Ballina Angelfish", "Frog",
        "Darwin Clownfish", "Jewel Tang", "Candy Butterfly", "Fire Goby",
        "Kau Cardinal", "Rockform Cardianl", "Volsail Tang", "White Clownfish",
        "Scissortail Dartfish", "Charmed Tang", "Catfish", "Sheepshead Fish",
        "Coney Fish", "Jellyfish"
    }
}

-- ========== STATE ==========
local state = {
    autoFishing = false,
    autoSell = false,
    antiAFK = false,
    filterRare = {
        Secret = false,
        Mythic = false,
        Legendary = false,
        Epic = false,
        Rare = false
    },
    fishingThread = nil,
    lastFishingSpot = nil,
    playerTeleportUsername = "",
    spoofRod = "Ghostfinn Rod",
    spoofBait = "Singularity Bait",
    spoofSkin = "Default",
    enableSpoof = false,
    lastActivity = tick(),
    guiVisible = true
}

-- ========== MENU VISIBILITY CONTROL ==========
local function toggleGUI()
    state.guiVisible = not state.guiVisible
    Window:ToggleUI()
    logInfo("GUI", "Menu visibility:", state.guiVisible and "SHOWN" or "HIDDEN")
end

-- Bind INSERT key to toggle menu
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Insert then
        toggleGUI()
    elseif input.KeyCode == Enum.KeyCode.F9 then
        logInfo("GUI", "Opening Dev Console (F9)...")
        game:GetService("StarterGui"):SetCore("DevConsoleVisible", true)
    end
end)

-- ========== RARE FISH DETECTION ==========
local function getFishTier(fishName)
    if not fishName then return nil end
    local fishStr = tostring(fishName)
    
    for tier, fishList in pairs(FISH_DATABASE) do
        for _, fish in ipairs(fishList) do
            if fishStr == fish or string.lower(fishStr) == string.lower(fish) then
                return tier
            end
        end
    end
    
    return nil
end

local function alertRareCatch(fishName, tier)
    stats.rareCaught = stats.rareCaught + 1
    table.insert(stats.rareFish, {name = fishName, tier = tier, time = os.date("%H:%M:%S")})
    logInfo("RARE", "üåüüåüüåü RARE CATCH:", fishName, "["..tier.."]", "üåüüåüüåü")
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "üåü RARE FISH!",
        Text = fishName .. " [" .. tier .. "]",
        Duration = 5
    })
end

-- ========== ROD/BAIT/SKIN SPOOF SYSTEM (FIXED) ==========
local function applyFullSpoof()
    if not state.enableSpoof then 
        logWarn("SPOOF", "Spoof is disabled")
        return 
    end
    
    logInfo("SPOOF", "üé≠ Applying full equipment spoof...")
    
    -- Equip Rod
    local rodSuccess = pcall(function()
        if RE_EquipRod then
            RE_EquipRod:FireServer(state.spoofRod)
            logInfo("SPOOF", "‚úÖ Rod spoofed:", state.spoofRod)
        else
            logError("SPOOF", "RE_EquipRod not found")
        end
    end)
    
    if not rodSuccess then
        logError("SPOOF", "Failed to equip rod")
    end
    
    task.wait(0.2)
    
    -- Equip Bait
    local baitSuccess = pcall(function()
        if RE_EquipBait then
            RE_EquipBait:FireServer(state.spoofBait)
            logInfo("SPOOF", "‚úÖ Bait spoofed:", state.spoofBait)
        else
            logError("SPOOF", "RE_EquipBait not found")
        end
    end)
    
    if not baitSuccess then
        logError("SPOOF", "Failed to equip bait")
    end
    
    task.wait(0.2)
    
    -- Equip Skin (if not Default)
    if state.spoofSkin ~= "Default" then
        local skinSuccess = pcall(function()
            if RE_EquipRodSkin then
                RE_EquipRodSkin:FireServer(state.spoofSkin)
                logInfo("SPOOF", "‚úÖ Skin spoofed:", state.spoofSkin)
            else
                logError("SPOOF", "RE_EquipRodSkin not found")
            end
        end)
        
        if not skinSuccess then
            logError("SPOOF", "Failed to equip skin")
        end
        
        task.wait(0.2)
    end
    
    logInfo("SPOOF", "‚úÖ Spoof application completed!")
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "üé≠ Spoof Applied",
        Text = "Rod: " .. state.spoofRod .. "\nBait: " .. state.spoofBait,
        Duration = 3
    })
end

-- ========== FISHING LOGIC ==========
local function startFishing()
    if state.fishingThread then 
        logWarn("FISHING", "Already running")
        return 
    end
    
    logInfo("FISHING", "üé£ Starting Auto Fishing...")
    
    if state.enableSpoof then
        applyFullSpoof()
    end
    
    state.fishingThread = task.spawn(function()
        local cycleCount = 0
        
        while state.autoFishing do
            cycleCount = cycleCount + 1
            stats.totalCycles = cycleCount
            perfStart("Cycle_"..cycleCount)
            
            local ok, err = pcall(function()
                local EQUIP_DELAY = 0.15
                local CHARGE_DELAY = 0.25
                local CAST_WAIT = 0.4
                local BITE_WAIT = 3.5
                local CATCH_DELAY = 0.3
                local REST_DELAY = 1.5
                
                local player = Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    state.lastFishingSpot = player.Character.HumanoidRootPart.CFrame
                end
                
                if RE_EquipTool then
                    RE_EquipTool:FireServer(1)
                    task.wait(EQUIP_DELAY)
                end

                if RF_Charge then
                    pcall(function()
                        RF_Charge:InvokeServer(workspace:GetServerTimeNow())
                    end)
                    task.wait(CHARGE_DELAY)
                end

                task.wait(CAST_WAIT)
                
                if RF_RequestMini then
                    pcall(function()
                        RF_RequestMini:InvokeServer(-1.2, 1)
                    end)
                end
                
                task.wait(BITE_WAIT)

                if RE_Completed then
                    pcall(function()
                        RE_Completed:FireServer()
                        stats.fishCaught = stats.fishCaught + 1
                    end)
                    task.wait(CATCH_DELAY)
                end
                
                task.wait(REST_DELAY)
                state.lastActivity = tick()
            end)
            
            perfEnd("Cycle_"..cycleCount)
            
            if not ok then
                logError("FISHING", "‚ùå Cycle error:", tostring(err))
                stats.errorCount.fishing = stats.errorCount.fishing + 1
                task.wait(3)
            end
        end
        
        state.fishingThread = nil
    end)
end

-- ========== SELLING LOGIC ==========
local function sellFish(manual)
    perfStart("Sell")
    
    local player = Players.LocalPlayer
    if not player then return end
    
    local protectedFish = {}
    pcall(function()
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            for _, item in ipairs(backpack:GetChildren()) do
                local tier = getFishTier(item.Name)
                if tier and state.filterRare[tier] then
                    table.insert(protectedFish, {name = item.Name, tier = tier})
                end
            end
        end
    end)
    
    if #protectedFish == 0 then
        if RF_SellAll then
            pcall(function()
                RF_SellAll:InvokeServer()
                logInfo("SELL", "‚úÖ Sold fish", manual and "(Manual)" or "(Auto)")
            end)
        end
    else
        logInfo("SELL", "Skipped - Protected fish:")
        for _, fish in ipairs(protectedFish) do
            logInfo("SELL", " -", fish.name, "["..fish.tier.."]")
        end
    end
    
    perfEnd("Sell")
end

-- ========== TELEPORT LOCATIONS ==========
local NPCS_ORDER = {
    {name = "Rods Here!", pos = Vector3.new(146.81, 20.47, 2837.95)},
    {name = "Bobbers", pos = Vector3.new(103.67, 17.28, 2867.04)},
    {name = "Skin Crates", pos = Vector3.new(78.28, 17.28, 2865.28)},
    {name = "Sell Here!", pos = Vector3.new(44.10, 17.28, 2867.51)},
    {name = "Utility Store", pos = Vector3.new(-43.83, 20.46, 2874.31)},
    {name = "Traveling Merchant", pos = Vector3.new(-128.38, 2.58, 2767.39)}
}

local ISLANDS_ORDER = {
    {name = "Fisherman Island", pos = Vector3.new(122.96, 3.37, 2784.57)},
    {name = "Ancient Jungle", pos = Vector3.new(1235.60, 7.97, -123.50)},
    {name = "Lost Isle", pos = Vector3.new(-3603.80, -2.66, -1310.98)},
    {name = "Esoteric Depths", pos = Vector3.new(2954.65, -1302.73, 1529.24)},
    {name = "Crater Island", pos = Vector3.new(993.45, 2.49, 5012.44)},
    {name = "Tropical Grove", pos = Vector3.new(-2049.86, 6.27, 3655.13)},
    {name = "Coral Reefs", pos = Vector3.new(-2730.52, 4.00, 2174.49)},
    {name = "Kohana Volcano", pos = Vector3.new(-598.58, 59.00, 108.43)}
}

local function teleportTo(position, name)
    perfStart("Teleport")
    local player = Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local success, err = pcall(function()
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
            logInfo("TELEPORT", "‚úÖ Teleported to:", name)
        end)
        
        if not success then
            logError("TELEPORT", "Failed:", tostring(err))
        end
    else
        logError("TELEPORT", "Character not found")
    end
    perfEnd("Teleport")
end

local function teleportToPlayer(username)
    perfStart("TeleportPlayer")
    
    if not username or username == "" then
        logError("TELEPORT", "Username is empty!")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ùå Teleport Failed",
            Text = "Please enter a username first",
            Duration = 3
        })
        perfEnd("TeleportPlayer")
        return
    end
    
    logInfo("TELEPORT", "Searching for player:", username)
    
    -- Try exact match first
    local targetPlayer = Players:FindFirstChild(username)
    
    -- If not found, try case-insensitive search
    if not targetPlayer then
        for _, player in ipairs(Players:GetPlayers()) do
            if string.lower(player.Name) == string.lower(username) or 
               string.lower(player.DisplayName) == string.lower(username) then
                targetPlayer = player
                break
            end
        end
    end
    
    if not targetPlayer then
        logError("TELEPORT", "Player not found:", username)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ùå Player Not Found",
            Text = username .. " is not in this server",
            Duration = 3
        })
        perfEnd("TeleportPlayer")
        return
    end
    
    logInfo("TELEPORT", "Found player:", targetPlayer.Name)
    
    if not targetPlayer.Character then
        logError("TELEPORT", "Player character not loaded")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ùå Teleport Failed",
            Text = "Player character not loaded",
            Duration = 3
        })
        perfEnd("TeleportPlayer")
        return
    end
    
    local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not targetHRP then
        logError("TELEPORT", "Player HumanoidRootPart not found")
        perfEnd("TeleportPlayer")
        return
    end
    
    local player = Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local success, err = pcall(function()
            player.Character.HumanoidRootPart.CFrame = targetHRP.CFrame * CFrame.new(0, 0, 3)
            logInfo("TELEPORT", "‚úÖ Teleported to player:", targetPlayer.Name)
            
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "‚úÖ Teleport Success",
                Text = "Teleported to " .. targetPlayer.Name,
                Duration = 3
            })
        end)
        
        if not success then
            logError("TELEPORT", "Teleport failed:", tostring(err))
        end
    else
        logError("TELEPORT", "Your character not found")
    end
    
    perfEnd("TeleportPlayer")
end

-- ========== ANTI-AFK SYSTEM ==========
local function startAntiAFK()
    task.spawn(function()
        while state.antiAFK do
            local player = Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = player.Character.HumanoidRootPart
                local randomOffset = Vector3.new(math.random(-2, 2), 0, math.random(-2, 2))
                hrp.CFrame = hrp.CFrame + randomOffset
            end
            task.wait(math.random(45, 90))
        end
    end)
    logInfo("STABILITY", "‚úÖ Anti-AFK enabled")
end

-- ========== EMERGENCY RESET ==========
local function emergencyReset()
    logWarn("RESET", "üö® EMERGENCY RESET TRIGGERED")
    
    state.autoFishing = false
    state.autoSell = false
    state.antiAFK = false
    state.enableSpoof = false
    
    task.wait(0.5)
    
    stats.fishCaught = 0
    stats.rareCaught = 0
    stats.totalCycles = 0
    stats.rareFish = {}
    
    logInfo("RESET", "‚úÖ All systems stopped and stats cleared")
end

-- ========== LOG VIEWER ==========
local function showRecentLogs()
    logInfo("DEBUG", "========== RECENT LOGS ==========")
    local startIdx = math.max(1, #logHistory - 20)
    for i = startIdx, #logHistory do
        local entry = logHistory[i]
        print(string.format("[%s][%s] %s", entry.time, entry.category, entry.message))
    end
    logInfo("DEBUG", "========== END LOGS ==========")
end

-- ========== GUI: FISHING TAB ==========
FishingSection:NewToggle("Enable Auto Fishing", "Start automatic fishing", function(v)
    state.autoFishing = v
    logInfo("GUI", "Auto Fishing:", tostring(v))
    if v then startFishing() end
end)

FishingSection:NewLabel("‚ö° Fixed timing system")
FishingSection:NewLabel("üêü Catches: 0 | üåü Rare: 0")

-- ========== GUI: SELLING TAB ==========
SellSection:NewLabel("üõ°Ô∏è Filter Fish (Don't Sell)")

SellSection:NewToggle("Secret Fish", "Don't sell Secret tier", function(v)
    state.filterRare.Secret = v
end)

SellSection:NewToggle("Mythic Fish", "Don't sell Mythic tier", function(v)
    state.filterRare.Mythic = v
end)

SellSection:NewToggle("Legendary Fish", "Don't sell Legendary tier", function(v)
    state.filterRare.Legendary = v
end)

SellSection:NewToggle("Epic Fish", "Don't sell Epic tier", function(v)
    state.filterRare.Epic = v
end)

SellSection:NewToggle("Rare Fish", "Don't sell Rare tier", function(v)
    state.filterRare.Rare = v
end)

SellSection:NewButton("üíµ Manual Sell", "Sell fish now (safe)", function()
    sellFish(true)
end)

SellSection:NewToggle("Auto Sell Every 30s", "Automatic selling", function(v)
    state.autoSell = v
    if v then
        task.spawn(function()
            while state.autoSell do
                task.wait(30)
                if state.autoSell then sellFish(false) end
            end
        end)
    end
end)

-- ========== GUI: TRAVEL TAB ==========
for _, npc in ipairs(NPCS_ORDER) do
    NPCSection:NewButton(npc.name, "Teleport to " .. npc.name, function()
        teleportTo(npc.pos, npc.name)
    end)
end

for _, island in ipairs(ISLANDS_ORDER) do
    IslandSection:NewButton(island.name, "Teleport to " .. island.name, function()
        teleportTo(island.pos, island.name)
    end)
end

PlayerSection:NewLabel("Enter exact username or display name")

PlayerSection:NewTextBox("Player Username", "Type username here...", function(text)
    state.playerTeleportUsername = text
    logInfo("GUI", "Username set to:", text)
end)

PlayerSection:NewButton("üöÄ Teleport to Player", "Teleport to entered player", function()
    logInfo("TELEPORT", "Button clicked! Username:", state.playerTeleportUsername)
    teleportToPlayer(state.playerTeleportUsername)
end)

-- ========== GUI: SPOOF TAB ==========
SpoofSection:NewLabel("‚ú® Get effects without owning items!")
SpoofSection:NewLabel("‚ö†Ô∏è Enable spoof first, then select items")

SpoofSection:NewToggle("Enable Full Spoof", "Activate equipment spoof", function(v)
    state.enableSpoof = v
    logInfo("SPOOF", "Spoof enabled:", tostring(v))
    if v then 
        task.wait(0.3)
        applyFullSpoof() 
    end
end)

SpoofSection:NewDropdown("Select Rod", "Choose rod to spoof", 
    {"Ghostfinn Rod", "Rod of the Depths", "Trident Rod", "Kings Rod", "Mythical Rod"}, 
    function(value)
        state.spoofRod = value
        logInfo("SPOOF", "Rod selected:", value)
        if state.enableSpoof then 
            task.wait(0.3)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewDropdown("Select Bait", "Choose bait to spoof",
    {"Singularity Bait", "Night Shrimp", "Truffle Worm", "Minnow", "Squid"},
    function(value)
        state.spoofBait = value
        logInfo("SPOOF", "Bait selected:", value)
        if state.enableSpoof then 
            task.wait(0.3)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewDropdown("Select Skin", "Choose skin to spoof",
    {"Default", "Aurora Rod", "Celestial Rod", "Magma Rod", "Ocean Rod"},
    function(value)
        state.spoofSkin = value
        logInfo("SPOOF", "Skin selected:", value)
        if state.enableSpoof then 
            task.wait(0.3)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewButton("üîÑ Reapply Spoof", "Reapply equipment spoof", function()
    if state.enableSpoof then
        applyFullSpoof()
    else
        logWarn("SPOOF", "Please enable spoof first!")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ö†Ô∏è Spoof Disabled",
            Text = "Enable spoof toggle first!",
            Duration = 3
        })
    end
end)

-- ========== GUI: STABILITY TAB ==========
StabilitySection:NewToggle("Anti-AFK Protection", "Prevent AFK kick", function(v)
    state.antiAFK = v
    if v then startAntiAFK() end
end)

StabilitySection:NewButton("üîÑ Restart Fishing", "Restart auto fishing", function()
    state.autoFishing = false
    task.wait(1)
    state.autoFishing = true
    startFishing()
end)

StabilitySection:NewButton("‚õî Emergency Stop All", "Stop all features", function()
    state.autoFishing = false
    state.autoSell = false
    state.antiAFK = false
    logWarn("STABILITY", "üö® ALL SYSTEMS STOPPED")
end)

StabilitySection:NewButton("üö® Emergency Reset", "Reset everything", function()
    emergencyReset()
end)

-- ========== GUI: MENU CONTROLS ==========
ControlSection:NewLabel("‚å®Ô∏è Keyboard Shortcuts")
ControlSection:NewLabel("INSERT - Toggle Menu")
ControlSection:NewLabel("F9 - Open Dev Console")

ControlSection:NewButton("üî≤ Toggle Menu Visibility", "Show/Hide GUI", function()
    toggleGUI()
end)

-- ========== GUI: DEBUG TAB ==========
DebugSection:NewLabel("üìú Logging & Debugging Tools")

DebugSection:NewButton("üìã Show Recent Logs (Console)", "Display last 20 logs", function()
    showRecentLogs()
end)

DebugSection:NewButton("üñ•Ô∏è Open Dev Console (F9)", "Open Roblox console", function()
    game:GetService("StarterGui"):SetCore("DevConsoleVisible", true)
    logInfo("DEBUG", "Dev Console opened")
end)

DebugSection:NewButton("üìä Print Full Statistics", "Show all stats in console", function()
    logInfo("STATS", "========== FULL STATISTICS ==========")
    logInfo("STATS", "Fish Caught:", stats.fishCaught)
    logInfo("STATS", "Rare Caught:", stats.rareCaught)
    logInfo("STATS", "Total Cycles:", stats.totalCycles)
    logInfo("STATS", "Fishing Errors:", stats.errorCount.fishing)
    logInfo("STATS", "Selling Errors:", stats.errorCount.selling)
    logInfo("STATS", "Teleport Errors:", stats.errorCount.teleport)
    
    if #stats.rareFish > 0 then
        logInfo("STATS", "Recent Rare Fish:")
        for i = math.max(1, #stats.rareFish - 10), #stats.rareFish do
            local fish = stats.rareFish[i]
            logInfo("STATS", " -", fish.name, "["..fish.tier.."]", "at", fish.time)
        end
    end
    
    logInfo("STATS", "========== END STATISTICS ==========")
end)

DebugSection:NewButton("üßπ Clear Log History", "Clear stored logs", function()
    logHistory = {}
    logInfo("DEBUG", "Log history cleared")
end)

-- ========== LOG SECTION ==========
LogSection:NewLabel("Recent logs appear in console (F9)")
LogSection:NewLabel("Total logs: 0")

-- Update log count display
task.spawn(function()
    while task.wait(5) do
        pcall(function()
            -- Log count is tracked internally
            logDebug("SYSTEM", "Active logs:", #logHistory)
        end)
    end
end)

-- ========== STATS SECTION ==========
StatsSection:NewLabel("üêü Fish: 0 | üåü Rare: 0")
StatsSection:NewLabel("üìä Cycles: 0 | ‚ùå Errors: 0")

-- Update stats display
task.spawn(function()
    while task.wait(3) do
        pcall(function()
            local totalErrors = stats.errorCount.fishing + stats.errorCount.selling + stats.errorCount.teleport
            logDebug("STATS", string.format("Fish: %d | Rare: %d | Cycles: %d | Errors: %d", 
                stats.fishCaught, stats.rareCaught, stats.totalCycles, totalErrors))
        end)
    end
end)

-- ========== FISH CAUGHT EVENT ==========
if RE_FishCaught then
    pcall(function()
        RE_FishCaught.OnClientEvent:Connect(function(fishData)
            if fishData and fishData.Name then
                logInfo("CATCH", "Fish caught:", fishData.Name)
                local tier = getFishTier(fishData.Name)
                if tier then
                    alertRareCatch(fishData.Name, tier)
                end
            end
        end)
        logInfo("EVENT", "‚úÖ FishCaught event listener attached")
    end)
else
    logWarn("EVENT", "RE/FishCaught not found - rare detection may not work")
end

-- ========== PERFORMANCE MONITORING ==========
task.spawn(function()
    while task.wait(60) do
        pcall(function()
            logInfo("PERF", "===== Performance Report =====")
            for name, data in pairs(perfTracker) do
                if data.count > 0 then
                    local avgTime = data.totalTime / data.count
                    logInfo("PERF", string.format("%s: %.2fs avg (x%d calls)", name, avgTime, data.count))
                end
            end
            logInfo("PERF", "=============================")
        end)
    end
end)

-- ========== AUTO-SAVE STATE (for long sessions) ==========
task.spawn(function()
    while task.wait(300) do -- Every 5 minutes
        pcall(function()
            logInfo("SYSTEM", "Auto-save checkpoint - Session running smoothly")
            logInfo("SYSTEM", "Fish:", stats.fishCaught, "| Rare:", stats.rareCaught, "| Cycles:", stats.totalCycles)
        end)
    end
end)

-- ========== INITIALIZE ==========
logInfo("INIT", "‚úÖ‚úÖ‚úÖ FishItHub v4.2 Ultimate LOADED ‚úÖ‚úÖ‚úÖ")
logInfo("INIT", "üé£ All systems ready!")
logInfo("INIT", "üîë Press INSERT to toggle menu")
logInfo("INIT", "üîë Press F9 to open dev console")

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "‚úÖ FishItHub v4.2 Ultimate",
    Text = "Loaded! Press INSERT to toggle menu",
    Duration = 5
})

-- Print initial state
logInfo("STATE", "Auto Fishing:", state.autoFishing)
logInfo("STATE", "Spoof System:", state.enableSpoof)
logInfo("STATE", "Anti-AFK:", state.antiAFK)

-- END OF SCRIPT
