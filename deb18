print("[FishItHub] üîÑ Loading v4.2 Ultimate (Enhanced & Fixed)...")

-- ========== ENHANCED LOGGING SYSTEM ==========
local LOG_LEVELS = {DEBUG = 1, INFO = 2, WARN = 3, ERROR = 4, CRITICAL = 5}
local logHistory = {}
local MAX_LOG_HISTORY = 500
local currentLogLevel = LOG_LEVELS.DEBUG

local function addToHistory(level, category, message)
    table.insert(logHistory, {
        timestamp = tick(),
        level = level,
        category = category,
        message = message,
        time = os.date("%H:%M:%S")
    })
    if #logHistory > MAX_LOG_HISTORY then table.remove(logHistory, 1) end
end

local function safeConcat(...)
    local args = {...}
    local result = {}
    for i, v in ipairs(args) do
        table.insert(result, tostring(v))
    end
    return table.concat(result, " ")
end

local function log(level, category, ...)
    if level < currentLogLevel then return end
    local message = safeConcat(...)
    local prefix = "[FishItHub]["..category.."]"
    addToHistory(level, category, message)
    
    if level == LOG_LEVELS.DEBUG then print(prefix, "üîç", message)
    elseif level == LOG_LEVELS.INFO then print(prefix, "‚ÑπÔ∏è", message)
    elseif level == LOG_LEVELS.WARN then warn(prefix, "‚ö†Ô∏è", message)
    elseif level == LOG_LEVELS.ERROR then warn(prefix, "‚ùå", message)
    elseif level == LOG_LEVELS.CRITICAL then warn(prefix, "üî• CRITICAL:", message) end
end

local function logInfo(cat, ...) log(LOG_LEVELS.INFO, cat, ...) end
local function logWarn(cat, ...) log(LOG_LEVELS.WARN, cat, ...) end
local function logError(cat, ...) log(LOG_LEVELS.ERROR, cat, ...) end
local function logDebug(cat, ...) log(LOG_LEVELS.DEBUG, cat, ...) end

-- Performance Tracker
local perfTracker = {}
local function perfStart(name)
    perfTracker[name] = {start = tick(), count = (perfTracker[name] and perfTracker[name].count or 0) + 1}
end
local function perfEnd(name)
    if not perfTracker[name] then return end
    local elapsed = tick() - perfTracker[name].start
    perfTracker[name].lastDuration = elapsed
    perfTracker[name].totalTime = (perfTracker[name].totalTime or 0) + elapsed
    if elapsed > 5 then logWarn("PERF", name, "SLOW:", string.format("%.2f", elapsed).."s") end
    return elapsed
end

-- Statistics
local stats = {
    fishCaught = 0,
    rareCaught = 0,
    totalCycles = 0,
    errorCount = {fishing = 0, selling = 0, teleport = 0, init = 0},
    lastError = {},
    rareFish = {}
}

-- üß© Load Kavo UI Library
perfStart("LoadLibrary")
local Library
local success = pcall(function()
    Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
end)
perfEnd("LoadLibrary")

if not success or not Library then
    logError("INIT", "Failed to load Kavo library")
    return
end
logInfo("INIT", "‚úÖ Kavo UI Library loaded")

-- ü™ü Create GUI (Using Kavo)
local Window = Library.CreateLib("FishItHub v4.2 Ultimate", "DarkTheme")

if not Window then
    logError("INIT", "Failed to create window")
    return
end

-- üóÇÔ∏è Create Tabs
local TabFishing = Window:NewTab("üé£ Fishing")
local TabSelling = Window:NewTab("üí∞ Selling")
local TabTravel = Window:NewTab("üó∫Ô∏è Travel")
local TabSpoof = Window:NewTab("üé≠ Spoof")
local TabStability = Window:NewTab("üõ°Ô∏è Stability")
local TabDebug = Window:NewTab("üêõ Debug")

-- Create Sections
local FishingSection = TabFishing:NewSection("Auto Fishing")
local SellSection = TabSelling:NewSection("Smart Selling")
local NPCSection = TabTravel:NewSection("Fishing Merchants")
local IslandSection = TabTravel:NewSection("Island Teleports")
local PlayerSection = TabTravel:NewSection("Teleport to Player")
local SpoofSection = TabSpoof:NewSection("Equipment Spoof")
local StabilitySection = TabStability:NewSection("Stability & Safety")
local ControlSection = TabStability:NewSection("Menu Controls")
local DebugSection = TabDebug:NewSection("Debug Logs")
local StatsSection = TabDebug:NewSection("Statistics")

logInfo("GUI", "‚úÖ All tabs created")

-- üåê Find Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local net

pcall(function()
    net = ReplicatedStorage:WaitForChild("Packages", 5)
        :WaitForChild("_Index", 5)
        :WaitForChild("sleitnick_net@0.2.0", 5)
        :WaitForChild("net", 5)
end)

if not net then
    local pk = ReplicatedStorage:FindFirstChild("Packages")
    if pk then
        local idx = pk:FindFirstChild("_Index")
        if idx then
            for _, v in ipairs(idx:GetChildren()) do
                if string.find(v.Name, "sleitnick_net") then
                    net = v:FindFirstChild("net")
                    if net then break end
                end
            end
        end
    end
end

if not net then
    logError("NET", "Cannot find net folder")
    return
end

logInfo("NET", "‚úÖ Found net folder")

-- üéØ Get Remotes
local function getRemote(name)
    local found = net:FindFirstChild(name, true)
    if found then logInfo("REMOTE", "‚úÖ", name)
    else logWarn("REMOTE", "‚ö†Ô∏è Missing:", name) end
    return found
end

local RF_Charge = getRemote("RF/ChargeFishingRod")
local RF_RequestMini = getRemote("RF/RequestFishingMinigameStarted")
local RE_Completed = getRemote("RE/FishingCompleted")
local RE_EquipTool = getRemote("RE/EquipToolFromHotbar")
local RF_SellAll = getRemote("RF/SellAllItems")
local RE_EquipRod = getRemote("RE/EquipItem")
local RE_EquipBait = getRemote("RE/EquipBait")
local RE_EquipRodSkin = getRemote("RE/EquipRodSkin")
local RE_FishCaught = getRemote("RE/FishCaught")

-- ========== FISH CATEGORIES DATABASE ==========
local FISH_DATABASE = {
    Secret = {
        "Crystal Crab", "Orca", "Megalodon", "Worm Fish", "Ghost Shark",
        "Lochness Monster", "Monster Shark", "Eerie Shark", "Armored Shark",
        "Great Whale", "Kraken", "Queen Crab", "Robot Kraken", "King Crab",
        "Giant Squid", "Panther Eel"
    },
    Mythic = {
        "Dotted Stingray", "Manta Ray", "Hammerhead Shark", "Swordfish Shark",
        "Loggerhead Turtle", "Prismy Seahorse", "Blueflame Ray", "Magma Shark",
        "Hawks Turtle", "Abyss Seahorse", "Brown Megalodon", "Thresher Shark",
        "Blob Fish"
    },
    Legendary = {
        "Lined Cardinal Fish", "Yellowfish Tuna", "Chrome Tuna", "Bumblebee Grouper",
        "Lobster", "Lavafin Tuna", "Starjam Tang", "Greenbee Grouper",
        "Blue Lobster", "Enchanted Angelfish", "Magic Tang", "Axolotl",
        "Deep Sea Crab"
    },
    Epic = {
        "Dorhey Tang", "Unicorn Tang", "Cow Clownfish", "Moorish Idol",
        "Sushi Cardinal", "Longnose Butterfly", "Firecoal Damsel", "Panther Grouper",
        "Domino Damsel", "Astra Damsel", "Pufferfish", "Vampire Squid",
        "Angler Fish"
    },
    Rare = {
        "Barracuda Fish", "Korean Angelfish", "Ballina Angelfish", "Frog",
        "Darwin Clownfish", "Jewel Tang", "Candy Butterfly", "Fire Goby",
        "Kau Cardinal", "Rockform Cardianl", "Volsail Tang", "White Clownfish",
        "Scissortail Dartfish", "Charmed Tang", "Catfish", "Sheepshead Fish",
        "Coney Fish", "Jellyfish"
    }
}

-- ========== STATE ==========
local state = {
    autoFishing = false,
    autoSell = false,
    antiAFK = false,
    filterRare = {
        Secret = false,
        Mythic = false,
        Legendary = false,
        Epic = false,
        Rare = false
    },
    fishingThread = nil,
    lastFishingSpot = nil,
    playerTeleportUsername = "",
    spoofRod = "Ghostfinn Rod",
    spoofBait = "Singularity Bait",
    spoofSkin = "Default",
    enableSpoof = false,
    lastActivity = tick()
}

-- ========== RARE FISH DETECTION ==========
local function getFishTier(fishName)
    if not fishName then return nil end
    local fishStr = tostring(fishName)
    
    for tier, fishList in pairs(FISH_DATABASE) do
        for _, fish in ipairs(fishList) do
            if fishStr == fish or string.lower(fishStr) == string.lower(fish) then
                return tier
            end
        end
    end
    
    return nil
end

local function alertRareCatch(fishName, tier)
    stats.rareCaught = stats.rareCaught + 1
    table.insert(stats.rareFish, {name = fishName, tier = tier, time = os.date("%H:%M:%S")})
    logInfo("RARE", "üåüüåüüåü RARE CATCH:", fishName, "["..tier.."]", "üåüüåüüåü")
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "üåü RARE FISH!",
        Text = fishName .. " [" .. tier .. "]",
        Duration = 5
    })
end

-- ========== ROD/BAIT/SKIN SPOOF SYSTEM (ENHANCED) ==========
local function applyFullSpoof()
    if not state.enableSpoof then return end
    
    logInfo("SPOOF", "üé≠ Applying full equipment spoof...")
    
    -- Equip Rod
    local rodSuccess = pcall(function()
        if RE_EquipRod then
            RE_EquipRod:FireServer(state.spoofRod)
            logInfo("SPOOF", "‚úÖ Rod equipped:", state.spoofRod)
        end
    end)
    
    if not rodSuccess then
        logError("SPOOF", "Failed to equip rod")
    end
    task.wait(0.15)
    
    -- Equip Bait
    local baitSuccess = pcall(function()
        if RE_EquipBait then
            RE_EquipBait:FireServer(state.spoofBait)
            logInfo("SPOOF", "‚úÖ Bait equipped:", state.spoofBait)
        end
    end)
    
    if not baitSuccess then
        logError("SPOOF", "Failed to equip bait")
    end
    task.wait(0.15)
    
    -- Equip Skin (if not Default)
    if state.spoofSkin ~= "Default" then
        local skinSuccess = pcall(function()
            if RE_EquipRodSkin then
                RE_EquipRodSkin:FireServer(state.spoofSkin)
                logInfo("SPOOF", "‚úÖ Skin equipped:", state.spoofSkin)
            end
        end)
        
        if not skinSuccess then
            logError("SPOOF", "Failed to equip skin")
        end
        task.wait(0.15)
    end
    
    logInfo("SPOOF", "‚úÖ All equipment spoofed successfully!")
end

-- ========== FISHING LOGIC (WITH DETAILED LOGS) ==========
local function startFishing()
    if state.fishingThread then 
        logWarn("FISHING", "Already running")
        return 
    end
    
    logInfo("FISHING", "üé£ Starting Auto Fishing...")
    
    if state.enableSpoof then
        applyFullSpoof()
    end
    
    state.fishingThread = task.spawn(function()
        local cycleCount = 0
        
        while state.autoFishing do
            cycleCount = cycleCount + 1
            stats.totalCycles = cycleCount
            perfStart("Cycle_"..cycleCount)
            
            logInfo("FISHING", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Cycle #"..cycleCount.." START ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            
            local ok, err = pcall(function()
                local EQUIP_DELAY = 0.15
                local CHARGE_DELAY = 0.25
                local CAST_WAIT = 0.4
                local BITE_WAIT = 3.5
                local CATCH_DELAY = 0.3
                local REST_DELAY = 1.5
                
                -- Save position
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    state.lastFishingSpot = player.Character.HumanoidRootPart.CFrame
                    logDebug("FISHING", "üìç Position saved")
                end
                
                -- Step 1: Equip Rod
                logInfo("FISHING", "‚öôÔ∏è Step 1: Equipping rod...")
                if RE_EquipTool then
                    RE_EquipTool:FireServer(1)
                    task.wait(EQUIP_DELAY)
                    logInfo("FISHING", "‚úÖ Rod equipped")
                else
                    logError("FISHING", "‚ùå Cannot equip rod - remote missing")
                end

                -- Step 2: Charge Rod
                logInfo("FISHING", "‚ö° Step 2: Charging rod...")
                if RF_Charge then
                    local chargeResult = pcall(function()
                        RF_Charge:InvokeServer(workspace:GetServerTimeNow())
                    end)
                    task.wait(CHARGE_DELAY)
                    if chargeResult then
                        logInfo("FISHING", "‚úÖ Rod charged successfully")
                    else
                        logError("FISHING", "‚ùå Charge failed")
                    end
                else
                    logError("FISHING", "‚ùå Cannot charge - remote missing")
                end

                -- Step 3: Cast
                logInfo("FISHING", "üéØ Step 3: Casting line...")
                task.wait(CAST_WAIT)
                logInfo("FISHING", "‚úÖ Line cast complete")
                
                -- Step 4: Start Minigame
                logInfo("FISHING", "üéÆ Step 4: Starting fishing minigame...")
                if RF_RequestMini then
                    local miniResult = pcall(function()
                        RF_RequestMini:InvokeServer(-1.2, 1)
                    end)
                    if miniResult then
                        logInfo("FISHING", "‚úÖ Minigame started")
                    else
                        logError("FISHING", "‚ùå Minigame start failed")
                    end
                else
                    logError("FISHING", "‚ùå Cannot start minigame - remote missing")
                end
                
                -- Step 5: Wait for Bite
                logInfo("FISHING", "‚è≥ Step 5: Waiting for bite...")
                task.wait(BITE_WAIT)
                logInfo("FISHING", "üé£ Bite detected!")

                -- Step 6: Complete Catch
                logInfo("FISHING", "‚ú® Step 6: Completing catch...")
                if RE_Completed then
                    local catchResult = pcall(function()
                        RE_Completed:FireServer()
                        stats.fishCaught = stats.fishCaught + 1
                    end)
                    task.wait(CATCH_DELAY)
                    if catchResult then
                        logInfo("FISHING", "‚úÖ Fish caught! Total:", stats.fishCaught)
                    else
                        logError("FISHING", "‚ùå Catch completion failed")
                    end
                else
                    logError("FISHING", "‚ùå Cannot complete - remote missing")
                end
                
                -- Step 7: Rest
                logInfo("FISHING", "üí§ Step 7: Resting before next cast...")
                task.wait(REST_DELAY)
                
                logInfo("FISHING", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Cycle #"..cycleCount.." END ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                state.lastActivity = tick()
            end)
            
            local elapsed = perfEnd("Cycle_"..cycleCount)
            logDebug("FISHING", "‚è±Ô∏è Cycle duration:", string.format("%.2f", elapsed or 0).."s")
            
            if not ok then
                logError("FISHING", "‚ùå Cycle error:", tostring(err))
                stats.errorCount.fishing = stats.errorCount.fishing + 1
                task.wait(3)
            end
        end
        
        state.fishingThread = nil
        logInfo("FISHING", "üõë Auto fishing stopped")
    end)
end

-- ========== SELLING LOGIC ==========
local function sellFish(manual)
    perfStart("Sell")
    
    local player = game.Players.LocalPlayer
    if not player then return end
    
    local protectedFish = {}
    pcall(function()
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            for _, item in ipairs(backpack:GetChildren()) do
                local tier = getFishTier(item.Name)
                if tier and state.filterRare[tier] then
                    table.insert(protectedFish, {name = item.Name, tier = tier})
                end
            end
        end
    end)
    
    if #protectedFish == 0 then
        if RF_SellAll then
            pcall(function()
                RF_SellAll:InvokeServer()
                logInfo("SELL", "‚úÖ Sold fish", manual and "(Manual)" or "(Auto)")
            end)
        end
    else
        logInfo("SELL", "Skipped - Protected fish:")
        for _, fish in ipairs(protectedFish) do
            logInfo("SELL", " -", fish.name, "["..fish.tier.."]")
        end
    end
    
    perfEnd("Sell")
end

-- ========== TELEPORT LOCATIONS ==========
local NPCS_ORDER = {
    {name = "Rods Here!", pos = Vector3.new(146.81, 20.47, 2837.95)},
    {name = "Bobbers", pos = Vector3.new(103.67, 17.28, 2867.04)},
    {name = "Skin Crates", pos = Vector3.new(78.28, 17.28, 2865.28)},
    {name = "Sell Here!", pos = Vector3.new(44.10, 17.28, 2867.51)},
    {name = "Utility Store", pos = Vector3.new(-43.83, 20.46, 2874.31)},
    {name = "Traveling Merchant", pos = Vector3.new(-128.38, 2.58, 2767.39)}
}

local ISLANDS_ORDER = {
    {name = "Fisherman Island", pos = Vector3.new(122.96, 3.37, 2784.57)},
    {name = "Ancient Jungle", pos = Vector3.new(1235.60, 7.97, -123.50)},
    {name = "Lost Isle", pos = Vector3.new(-3779.84, -135.07, -975.06)},
    {name = "Esoteric Depths", pos = Vector3.new(2954.65, -1302.73, 1529.24)},
    {name = "Crater Island", pos = Vector3.new(993.45, 2.49, 5012.44)},
    {name = "Tropical Grove", pos = Vector3.new(-2049.86, 6.27, 3655.13)},
    {name = "Coral Reefs", pos = Vector3.new(-2730.52, 4.00, 2174.49)},
    {name = "Kohana Volcano", pos = Vector3.new(-598.58, 59.00, 108.43)}
}

local function teleportTo(position, name)
    perfStart("Teleport")
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
            logInfo("TELEPORT", "‚úÖ Teleported to:", name)
        end)
    end
    perfEnd("Teleport")
end

-- ========== TELEPORT TO PLAYER (FIXED) ==========
local function teleportToPlayer(username)
    logInfo("TELEPORT", "üöÄ Attempting teleport to player:", username)
    
    if not username or username == "" then
        logError("TELEPORT", "‚ùå Username is empty")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ö†Ô∏è Teleport Failed",
            Text = "Please enter a username first!",
            Duration = 3
        })
        return
    end
    
    logDebug("TELEPORT", "Searching for player:", username)
    
    local targetPlayer = nil
    
    -- Try exact match first
    targetPlayer = game.Players:FindFirstChild(username)
    
    -- If not found, try case-insensitive search
    if not targetPlayer then
        logDebug("TELEPORT", "Exact match not found, trying case-insensitive...")
        for _, player in ipairs(game.Players:GetPlayers()) do
            if string.lower(player.Name) == string.lower(username) then
                targetPlayer = player
                logDebug("TELEPORT", "Found via case-insensitive:", player.Name)
                break
            end
        end
    end
    
    -- If still not found, try partial match
    if not targetPlayer then
        logDebug("TELEPORT", "Case-insensitive not found, trying partial match...")
        for _, player in ipairs(game.Players:GetPlayers()) do
            if string.find(string.lower(player.Name), string.lower(username)) then
                targetPlayer = player
                logDebug("TELEPORT", "Found via partial match:", player.Name)
                break
            end
        end
    end
    
    if not targetPlayer then
        logError("TELEPORT", "‚ùå Player not found:", username)
        logInfo("TELEPORT", "Available players:")
        for _, player in ipairs(game.Players:GetPlayers()) do
            logInfo("TELEPORT", " -", player.Name)
        end
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ùå Player Not Found",
            Text = username .. " is not in this server!",
            Duration = 3
        })
        return
    end
    
    logInfo("TELEPORT", "‚úÖ Player found:", targetPlayer.Name)
    
    if not targetPlayer.Character then
        logError("TELEPORT", "‚ùå Player has no character:", targetPlayer.Name)
        return
    end
    
    local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not targetHRP then
        logError("TELEPORT", "‚ùå Cannot find HumanoidRootPart for:", targetPlayer.Name)
        return
    end
    
    local player = game.Players.LocalPlayer
    if not player or not player.Character then
        logError("TELEPORT", "‚ùå Local player character not found")
        return
    end
    
    local localHRP = player.Character:FindFirstChild("HumanoidRootPart")
    if not localHRP then
        logError("TELEPORT", "‚ùå Local HumanoidRootPart not found")
        return
    end
    
    local success = pcall(function()
        localHRP.CFrame = targetHRP.CFrame * CFrame.new(0, 0, 3)
        logInfo("TELEPORT", "‚úÖ Teleported to player:", targetPlayer.Name)
    end)
    
    if success then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚úÖ Teleport Success",
            Text = "Teleported to " .. targetPlayer.Name,
            Duration = 3
        })
    else
        logError("TELEPORT", "‚ùå Teleport execution failed")
    end
end

-- ========== ANTI-AFK SYSTEM ==========
local function startAntiAFK()
    task.spawn(function()
        while state.antiAFK do
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = player.Character.HumanoidRootPart
                local randomOffset = Vector3.new(math.random(-2, 2), 0, math.random(-2, 2))
                hrp.CFrame = hrp.CFrame + randomOffset
            end
            task.wait(math.random(45, 90))
        end
    end)
    logInfo("STABILITY", "‚úÖ Anti-AFK enabled")
end

-- ========== EMERGENCY RESET ==========
local function emergencyReset()
    logWarn("RESET", "üö® EMERGENCY RESET TRIGGERED")
    
    state.autoFishing = false
    state.autoSell = false
    state.antiAFK = false
    state.enableSpoof = false
    
    task.wait(0.5)
    
    stats.fishCaught = 0
    stats.rareCaught = 0
    stats.totalCycles = 0
    stats.rareFish = {}
    
    logInfo("RESET", "‚úÖ All systems stopped and stats cleared")
end

-- ========== LOG VIEWER WINDOW ==========
local logViewerOpen = false
local logViewerGui = nil

local function createLogViewer()
    if logViewerGui then
        logViewerGui:Destroy()
    end
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "FishItHubLogViewer"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 600, 0, 400)
    MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = MainFrame
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, -80, 0, 40)
    Title.Position = UDim2.new(0, 0, 0, 0)
    Title.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Title.BorderSizePixel = 0
    Title.Text = "üìú FishItHub Debug Logs"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 18
    Title.Font = Enum.Font.GothamBold
    Title.Parent = MainFrame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 8)
    TitleCorner.Parent = Title
    
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 70, 0, 30)
    CloseButton.Position = UDim2.new(1, -75, 0, 5)
    CloseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = "‚úï Close"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 14
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = MainFrame
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 6)
    CloseCorner.Parent = CloseButton
    
    local ScrollFrame = Instance.new("ScrollingFrame")
    ScrollFrame.Name = "ScrollFrame"
    ScrollFrame.Size = UDim2.new(1, -20, 1, -60)
    ScrollFrame.Position = UDim2.new(0, 10, 0, 50)
    ScrollFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    ScrollFrame.BorderSizePixel = 0
    ScrollFrame.ScrollBarThickness = 8
    ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    ScrollFrame.Parent = MainFrame
    
    local ScrollCorner = Instance.new("UICorner")
    ScrollCorner.CornerRadius = UDim.new(0, 6)
    ScrollCorner.Parent = ScrollFrame
    
    local LogContainer = Instance.new("TextLabel")
    LogContainer.Name = "LogContainer"
    LogContainer.Size = UDim2.new(1, -10, 1, 0)
    LogContainer.Position = UDim2.new(0, 5, 0, 5)
    LogContainer.BackgroundTransparency = 1
    LogContainer.Text = ""
    LogContainer.TextColor3 = Color3.fromRGB(255, 255, 255)
    LogContainer.TextSize = 12
    LogContainer.Font = Enum.Font.Code
    LogContainer.TextXAlignment = Enum.TextXAlignment.Left
    LogContainer.TextYAlignment = Enum.TextYAlignment.Top
    LogContainer.TextWrapped = true
    LogContainer.Parent = ScrollFrame
    
    -- Update log content
    local function updateLogs()
        local logText = ""
        local lineCount = 0
        
        for i = #logHistory, math.max(1, #logHistory - 100), -1 do
            local log = logHistory[i]
            local levelIcon = ""
            
            if log.level == LOG_LEVELS.DEBUG then levelIcon = "üîç"
            elseif log.level == LOG_LEVELS.INFO then levelIcon = "‚ÑπÔ∏è"
            elseif log.level == LOG_LEVELS.WARN then levelIcon = "‚ö†Ô∏è"
            elseif log.level == LOG_LEVELS.ERROR then levelIcon = "‚ùå"
            elseif log.level == LOG_LEVELS.CRITICAL then levelIcon = "üî•" end
            
            logText = logText .. string.format("[%s] %s [%s] %s\n", 
                log.time, levelIcon, log.category, log.message)
            lineCount = lineCount + 1
        end
        
        LogContainer.Text = logText
        
        -- Auto-resize canvas
        local textSize = game:GetService("TextService"):GetTextSize(
            logText,
            LogContainer.TextSize,
            LogContainer.Font,
            Vector2.new(ScrollFrame.AbsoluteSize.X - 20, math.huge)
        )
        
        ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, textSize.Y + 20)
        ScrollFrame.CanvasPosition = Vector2.new(0, ScrollFrame.CanvasSize.Y.Offset)
    end
    
    updateLogs()
    
    -- Auto-update every 2 seconds
    task.spawn(function()
        while ScreenGui.Parent do
            task.wait(2)
            if logViewerOpen then
                updateLogs()
            end
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        logViewerOpen = false
        ScreenGui:Destroy()
        logViewerGui = nil
        logInfo("GUI", "Log viewer closed")
    end)
    
    -- Make draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    Title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
        end
    end)
    
    Title.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    ScreenGui.Parent = game:GetService("CoreGui")
    logViewerGui = ScreenGui
    logInfo("GUI", "Log viewer opened")
end

local function toggleLogViewer()
    if logViewerOpen then
        if logViewerGui then
            logViewerGui:Destroy()
            logViewerGui = nil
        end
        logViewerOpen = false
    else
        logViewerOpen = true
        createLogViewer()
    end
end

-- Insert key listener for log viewer
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Insert then
        toggleLogViewer()
    end
end)

-- ========== GUI: FISHING TAB ==========
FishingSection:NewToggle("Enable Auto Fishing", "Start automatic fishing", function(v)
    state.autoFishing = v
    logInfo("GUI", "Auto Fishing:", tostring(v))
    if v then startFishing() end
end)

FishingSection:NewLabel("‚ö° Fixed timing system")
FishingSection:NewLabel("üêü Catches: 0 | üåü Rare: 0")

-- ========== GUI: SELLING TAB ==========
SellSection:NewLabel("üõ°Ô∏è Filter Fish (Don't Sell)")

SellSection:NewToggle("Secret Fish", "Don't sell Secret tier", function(v)
    state.filterRare.Secret = v
    logInfo("FILTER", "Secret fish filter:", tostring(v))
end)

SellSection:NewToggle("Mythic Fish", "Don't sell Mythic tier", function(v)
    state.filterRare.Mythic = v
    logInfo("FILTER", "Mythic fish filter:", tostring(v))
end)

SellSection:NewToggle("Legendary Fish", "Don't sell Legendary tier", function(v)
    state.filterRare.Legendary = v
    logInfo("FILTER", "Legendary fish filter:", tostring(v))
end)

SellSection:NewToggle("Epic Fish", "Don't sell Epic tier", function(v)
    state.filterRare.Epic = v
    logInfo("FILTER", "Epic fish filter:", tostring(v))
end)

SellSection:NewToggle("Rare Fish", "Don't sell Rare tier", function(v)
    state.filterRare.Rare = v
    logInfo("FILTER", "Rare fish filter:", tostring(v))
end)

SellSection:NewButton("üíµ Manual Sell", "Sell fish now (safe)", function()
    sellFish(true)
end)

SellSection:NewToggle("Auto Sell Every 30s", "Automatic selling", function(v)
    state.autoSell = v
    logInfo("SELL", "Auto sell:", tostring(v))
    if v then
        task.spawn(function()
            while state.autoSell do
                task.wait(30)
                if state.autoSell then sellFish(false) end
            end
        end)
    end
end)

-- ========== GUI: TRAVEL TAB ==========
for _, npc in ipairs(NPCS_ORDER) do
    NPCSection:NewButton(npc.name, "Teleport to " .. npc.name, function()
        teleportTo(npc.pos, npc.name)
    end)
end

for _, island in ipairs(ISLANDS_ORDER) do
    IslandSection:NewButton(island.name, "Teleport to " .. island.name, function()
        teleportTo(island.pos, island.name)
    end)
end

PlayerSection:NewTextBox("Player Username", "Enter username", function(text)
    state.playerTeleportUsername = text
    logInfo("GUI", "Player teleport target set:", text)
end)

PlayerSection:NewButton("üöÄ Teleport to Player", "Teleport to entered player", function()
    if state.playerTeleportUsername ~= "" then
        teleportToPlayer(state.playerTeleportUsername)
    else
        logError("TELEPORT", "Please enter a username first")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ö†Ô∏è No Username",
            Text = "Please enter a player username!",
            Duration = 3
        })
    end
end)

-- ========== GUI: SPOOF TAB ==========
SpoofSection:NewLabel("‚ú® Get effects without owning items!")

SpoofSection:NewToggle("Enable Full Spoof", "Activate equipment spoof", function(v)
    state.enableSpoof = v
    logInfo("SPOOF", "Spoof system:", tostring(v))
    if v then 
        applyFullSpoof() 
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚úÖ Spoof Enabled",
            Text = "Equipment spoofed!",
            Duration = 3
        })
    end
end)

SpoofSection:NewDropdown("Select Rod", "Choose rod to spoof", 
    {"Ghostfinn Rod", "Rod of the Depths", "Trident Rod", "Kings Rod", "Mythical Rod", "No-Life Rod", "Fast Rod"}, 
    function(value)
        state.spoofRod = value
        logInfo("SPOOF", "Rod selected:", value)
        if state.enableSpoof then 
            task.wait(0.2)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewDropdown("Select Bait", "Choose bait to spoof",
    {"Singularity Bait", "Night Shrimp", "Truffle Worm", "Minnow", "Squid", "Fish Head", "Coral"},
    function(value)
        state.spoofBait = value
        logInfo("SPOOF", "Bait selected:", value)
        if state.enableSpoof then 
            task.wait(0.2)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewDropdown("Select Rod Skin", "Choose visual skin",
    {"Default", "Aurora Rod Skin", "Twilight Rod Skin", "Void Rod Skin", "Solar Rod Skin", "Lunar Rod Skin"},
    function(value)
        state.spoofSkin = value
        logInfo("SPOOF", "Skin selected:", value)
        if state.enableSpoof then 
            task.wait(0.2)
            applyFullSpoof() 
        end
    end
)

SpoofSection:NewButton("üîÑ Reapply Spoof", "Reapply equipment spoof", function()
    if state.enableSpoof then
        applyFullSpoof()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "üîÑ Spoof Reapplied",
            Text = "Equipment refreshed!",
            Duration = 2
        })
    else
        logWarn("SPOOF", "Enable spoof first!")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ö†Ô∏è Spoof Disabled",
            Text = "Enable spoof toggle first!",
            Duration = 3
        })
    end
end)

-- ========== GUI: STABILITY TAB ==========
StabilitySection:NewToggle("Anti-AFK Protection", "Prevent AFK kick", function(v)
    state.antiAFK = v
    logInfo("STABILITY", "Anti-AFK:", tostring(v))
    if v then startAntiAFK() end
end)

StabilitySection:NewButton("üîÑ Restart Fishing", "Restart auto fishing", function()
    logInfo("STABILITY", "Restarting fishing...")
    state.autoFishing = false
    task.wait(1)
    state.autoFishing = true
    startFishing()
end)

StabilitySection:NewButton("‚õî Emergency Stop All", "Stop all features", function()
    state.autoFishing = false
    state.autoSell = false
    state.antiAFK = false
    logWarn("STABILITY", "üö® ALL SYSTEMS STOPPED")
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "‚õî Emergency Stop",
        Text = "All systems stopped!",
        Duration = 3
    })
end)

StabilitySection:NewButton("üö® Emergency Reset", "Reset everything", function()
    emergencyReset()
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "üö® Emergency Reset",
        Text = "All systems reset!",
        Duration = 3
    })
end)

-- ========== GUI: MENU CONTROLS ==========
ControlSection:NewLabel("Press INSERT to open log viewer")
ControlSection:NewLabel("Logs update every 2 seconds")

ControlSection:NewButton("üìú Open Log Viewer", "Open debug log window", function()
    if not logViewerOpen then
        toggleLogViewer()
    end
end)

ControlSection:NewButton("üîÑ Refresh Logs", "Refresh log display", function()
    if logViewerOpen and logViewerGui then
        logInfo("GUI", "Refreshing logs manually...")
    else
        logWarn("GUI", "Log viewer is not open")
    end
end)

-- ========== GUI: DEBUG TAB ==========
DebugSection:NewLabel("üìú Press INSERT for log viewer")
DebugSection:NewLabel("Or use button in Stability tab")

DebugSection:NewButton("üìä Show Statistics", "Display current stats", function()
    logInfo("STATS", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ STATISTICS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    logInfo("STATS", "üêü Fish Caught:", stats.fishCaught)
    logInfo("STATS", "üåü Rare Caught:", stats.rareCaught)
    logInfo("STATS", "üìä Total Cycles:", stats.totalCycles)
    logInfo("STATS", "‚ùå Fishing Errors:", stats.errorCount.fishing)
    logInfo("STATS", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
end)

DebugSection:NewButton("üîç List Players", "Show all players in server", function()
    logInfo("DEBUG", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ PLAYER LIST ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    for i, player in ipairs(game.Players:GetPlayers()) do
        logInfo("DEBUG", i..".", player.Name, "(UserID:", player.UserId..")")
    end
    logInfo("DEBUG", "Total players:", #game.Players:GetPlayers())
    logInfo("DEBUG", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
end)

DebugSection:NewButton("üé£ Test Fishing Cycle", "Run one test cycle", function()
    if state.autoFishing then
        logWarn("DEBUG", "Stop auto fishing first!")
        return
    end
    
    logInfo("DEBUG", "Running test cycle...")
    state.autoFishing = true
    startFishing()
    
    task.wait(8)
    state.autoFishing = false
    logInfo("DEBUG", "Test cycle complete")
end)

StatsSection:NewLabel("üêü Fish: 0 | üåü Rare: 0")
StatsSection:NewLabel("üìä Cycles: 0 | ‚ùå Errors: 0")

-- Update stats display
task.spawn(function()
    while task.wait(2) do
        pcall(function()
            -- Stats are logged in console
            if stats.totalCycles > 0 and stats.totalCycles % 10 == 0 then
                logDebug("STATS", "Cycles:", stats.totalCycles, "| Fish:", stats.fishCaught, "| Rare:", stats.rareCaught)
            end
        end)
    end
end)

-- ========== FISH CAUGHT EVENT ==========
if RE_FishCaught then
    pcall(function()
        RE_FishCaught.OnClientEvent:Connect(function(fishData)
            if fishData and fishData.Name then
                local fishName = tostring(fishData.Name)
                logInfo("CATCH", "üé£ Caught:", fishName)
                
                local tier = getFishTier(fishName)
                if tier then
                    alertRareCatch(fishName, tier)
                end
            end
        end)
        logInfo("EVENT", "‚úÖ Fish caught event listener registered")
    end)
else
    logWarn("EVENT", "‚ö†Ô∏è Fish caught event not found")
end

-- ========== INITIALIZE ==========
logInfo("INIT", "‚úÖ‚úÖ‚úÖ FishItHub v4.2 Ultimate LOADED ‚úÖ‚úÖ‚úÖ")
logInfo("INIT", "üé£ All systems ready!")
logInfo("INIT", "")
logInfo("INIT", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
logInfo("INIT", "üìå FEATURES:")
logInfo("INIT", "  ‚úÖ Auto Fishing with detailed logs")
logInfo("INIT", "  ‚úÖ Smart selling with rarity filter")
logInfo("INIT", "  ‚úÖ Equipment spoof (Rod/Bait/Skin)")
logInfo("INIT", "  ‚úÖ Teleport to players (FIXED)")
logInfo("INIT", "  ‚úÖ Log viewer (Press INSERT)")
logInfo("INIT", "  ‚úÖ Anti-AFK protection")
logInfo("INIT", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
logInfo("INIT", "")
logInfo("INIT", "üîë HOTKEYS:")
logInfo("INIT", "  INSERT = Toggle Log Viewer")
logInfo("INIT", "")

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "‚úÖ FishItHub v4.2",
    Text = "Loaded! Press INSERT for logs",
    Duration = 5
})

-- END OF SCRIPT
