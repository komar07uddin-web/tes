-- [FishItHub v4.0 Ultimate] Complete Feature Set
-- Game: Fisch üêü
-- Author: Komar x ChatGPT x Claude
-- Features: Smart AutoFish, Rare Fish Filter, Island Teleports, Anti-AFK

print("[FishItHub] üîÑ Loading v4.0 Ultimate...")

-- ========== ENHANCED LOGGING SYSTEM ==========
local LOG_LEVELS = {DEBUG = 1, INFO = 2, WARN = 3, ERROR = 4, CRITICAL = 5}
local logHistory = {}
local MAX_LOG_HISTORY = 500
local currentLogLevel = LOG_LEVELS.INFO

local function addToHistory(level, category, message)
    table.insert(logHistory, {
        timestamp = tick(),
        level = level,
        category = category,
        message = message,
        time = os.date("%H:%M:%S")
    })
    if #logHistory > MAX_LOG_HISTORY then table.remove(logHistory, 1) end
end

local function safeConcat(...)
    local args = {...}
    local result = {}
    for i, v in ipairs(args) do
        table.insert(result, tostring(v))
    end
    return table.concat(result, " ")
end

local function log(level, category, ...)
    if level < currentLogLevel then return end
    local message = safeConcat(...)
    local prefix = "[FishItHub]["..category.."]"
    addToHistory(level, category, message)
    
    if level == LOG_LEVELS.DEBUG then print(prefix, "üîç", message)
    elseif level == LOG_LEVELS.INFO then print(prefix, "‚ÑπÔ∏è", message)
    elseif level == LOG_LEVELS.WARN then warn(prefix, "‚ö†Ô∏è", message)
    elseif level == LOG_LEVELS.ERROR then warn(prefix, "‚ùå", message)
    elseif level == LOG_LEVELS.CRITICAL then warn(prefix, "üî• CRITICAL:", message) end
end

local function logInfo(cat, ...) log(LOG_LEVELS.INFO, cat, ...) end
local function logWarn(cat, ...) log(LOG_LEVELS.WARN, cat, ...) end
local function logError(cat, ...) log(LOG_LEVELS.ERROR, cat, ...) end
local function logDebug(cat, ...) log(LOG_LEVELS.DEBUG, cat, ...) end

-- Performance Tracker
local perfTracker = {}
local function perfStart(name)
    perfTracker[name] = {start = tick(), count = (perfTracker[name] and perfTracker[name].count or 0) + 1}
end
local function perfEnd(name)
    if not perfTracker[name] then return end
    local elapsed = tick() - perfTracker[name].start
    perfTracker[name].lastDuration = elapsed
    perfTracker[name].totalTime = (perfTracker[name].totalTime or 0) + elapsed
    if elapsed > 5 then logWarn("PERF", name, "SLOW:", string.format("%.2f", elapsed).."s") end
    return elapsed
end

-- Statistics
local stats = {
    fishCaught = 0,
    rareCaught = 0,
    totalCycles = 0,
    errorCount = {fishing = 0, selling = 0, teleport = 0, init = 0},
    lastError = {},
    rareFish = {}
}

-- üß© Load Library
perfStart("LoadLibrary")
local success, ProjectMadara = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/idonthaveoneatm/Libraries/normal/quake/src"))()
end)
perfEnd("LoadLibrary")

if not success or not ProjectMadara then
    logError("INIT", "Failed to load library")
    return
end
logInfo("INIT", "‚úÖ Library loaded")

-- ü™ü Create GUI
local Main = ProjectMadara:Window({ Title = "FishItHub v4.0 Ultimate" })
if not Main then
    logError("INIT", "Failed to create window")
    return
end

-- üóÇÔ∏è Create Tabs
local Tabs = {}
local function createTab(name, color, icon)
    local ok, tab = pcall(function()
        return Main:Tab({ Name = name, tabColor = Color3.fromHex(color), Image = icon })
    end)
    if ok and tab then
        Tabs[name] = tab
        logInfo("GUI", "‚úÖ Tab:", name)
    else
        logError("GUI", "‚ùå Tab failed:", name)
    end
end

createTab("Fishing", "#3CB371", "rbxassetid://10709769841")
createTab("Selling", "#FFD700", "rbxassetid://10734952479")
createTab("Travel", "#1E90FF", "rbxassetid://10734886202")
createTab("Stability", "#FF6347", "rbxassetid://10747347376")

if not Tabs["Fishing"] then
    logError("INIT", "Critical: Tabs not initialized")
    return
end

-- üåê Find Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local net

pcall(function()
    net = ReplicatedStorage:WaitForChild("Packages", 5)
        :WaitForChild("_Index", 5)
        :WaitForChild("sleitnick_net@0.2.0", 5)
        :WaitForChild("net", 5)
end)

if not net then
    local pk = ReplicatedStorage:FindFirstChild("Packages")
    if pk then
        local idx = pk:FindFirstChild("_Index")
        if idx then
            for _, v in ipairs(idx:GetChildren()) do
                if string.find(v.Name, "sleitnick_net") then
                    net = v:FindFirstChild("net")
                    if net then break end
                end
            end
        end
    end
end

if not net then
    logError("NET", "Cannot find net folder")
    return
end

logInfo("NET", "‚úÖ Found net folder")

-- üéØ Get Remotes
local function getRemote(name)
    local found = net:FindFirstChild(name, true)
    if found then logInfo("REMOTE", "‚úÖ", name)
    else logWarn("REMOTE", "‚ö†Ô∏è Missing:", name) end
    return found
end

local RF_Charge = getRemote("RF/ChargeFishingRod")
local RF_RequestMini = getRemote("RF/RequestFishingMinigameStarted")
local RE_Completed = getRemote("RE/FishingCompleted")
local RE_EquipTool = getRemote("RE/EquipToolFromHotbar")
local RF_SellAll = getRemote("RF/SellAllItems")

-- ========== CATCH TIMINGS ==========
local CATCH_TIMINGS = {
    Perfect = {charge = 0.15, mini = 0.15, complete = 0.5, rest = 0.8},
    Safe = {charge = 0.50, mini = 0.40, complete = 4.0, rest = 2.5},
    Human = {charge = 0.45, mini = 0.35, complete = 3.5, rest = 2.0}
}

-- ========== STATE ==========
local state = {
    autoFishing = false,
    autoSell = false,
    antiAFK = false,
    catchMode = "Perfect",
    filterRare = {
        Secret = false,
        Mythic = false,
        Legendary = false,
        Epic = false,
        Rare = false
    },
    fishingThread = nil,
    lastFishingSpot = nil
}

-- ========== RARE FISH DETECTION ==========
local RARE_TIERS = {
    Secret = true,
    Mythic = true,
    Legendary = true,
    Epic = true,
    Rare = true
}

local function getFishTier(fishName)
    if not fishName then return nil end
    local lower = string.lower(tostring(fishName))
    
    -- Check tier keywords
    for tier, _ in pairs(RARE_TIERS) do
        if string.find(lower, string.lower(tier)) then
            return tier
        end
    end
    
    -- Known rare fish patterns
    local rarePatterns = {
        {pattern = "great white", tier = "Legendary"},
        {pattern = "whale shark", tier = "Legendary"},
        {pattern = "megalodon", tier = "Mythic"},
        {pattern = "ancient", tier = "Epic"},
        {pattern = "golden", tier = "Rare"},
        {pattern = "shiny", tier = "Rare"},
        {pattern = "mutant", tier = "Epic"}
    }
    
    for _, data in ipairs(rarePatterns) do
        if string.find(lower, data.pattern) then
            return data.tier
        end
    end
    
    return nil
end

local function alertRareCatch(fishName, tier)
    stats.rareCaught = stats.rareCaught + 1
    table.insert(stats.rareFish, {name = fishName, tier = tier, time = os.date("%H:%M:%S")})
    logInfo("RARE", "üåüüåüüåü RARE CATCH:", fishName, "["..tier.."]", "üåüüåüüåü")
    
    -- Visual alert
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "üåü RARE FISH!",
        Text = fishName .. " [" .. tier .. "]",
        Duration = 5
    })
end

-- ========== FISHING LOGIC ==========
local function startFishing()
    if state.fishingThread then 
        logWarn("FISHING", "Already running")
        return 
    end
    
    logInfo("FISHING", "üé£ Starting Auto Fishing...")
    state.fishingThread = task.spawn(function()
        local cycleCount = 0
        
        while state.autoFishing do
            cycleCount = cycleCount + 1
            stats.totalCycles = cycleCount
            
            local ok, err = pcall(function()
                local timings = CATCH_TIMINGS[state.catchMode]
                
                -- Save fishing spot
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    state.lastFishingSpot = player.Character.HumanoidRootPart.CFrame
                end
                
                -- Equip Tool
                if RE_EquipTool then
                    RE_EquipTool:FireServer(1)
                end
                task.wait(timings.charge)

                -- Charge Rod
                if RF_Charge then
                    pcall(function()
                        RF_Charge:InvokeServer(workspace:GetServerTimeNow())
                    end)
                end
                task.wait(timings.mini)

                -- Request Minigame
                if RF_RequestMini then
                    pcall(function()
                        RF_RequestMini:InvokeServer(-1.2, 1)
                    end)
                end
                task.wait(timings.complete)

                -- Complete Fishing
                if RE_Completed then
                    pcall(function()
                        RE_Completed:FireServer()
                    end)
                    stats.fishCaught = stats.fishCaught + 1
                end
                task.wait(timings.rest)
            end)
            
            if not ok then
                logError("FISHING", "Cycle", cycleCount, "error:", tostring(err))
                stats.errorCount.fishing = stats.errorCount.fishing + 1
            end
        end
        
        logInfo("FISHING", "‚õî Stopped after", cycleCount, "cycles")
        state.fishingThread = nil
    end)
end

-- ========== SELLING LOGIC ==========
local function sellFish(manual)
    perfStart("Sell")
    
    local player = game.Players.LocalPlayer
    if not player then return end
    
    -- Check inventory for protected fish tiers
    local hasProtectedFish = false
    pcall(function()
        local backpack = player:FindFirstChild("Backpack")
        
        if backpack then
            for _, item in ipairs(backpack:GetChildren()) do
                local tier = getFishTier(item.Name)
                if tier and state.filterRare[tier] then
                    hasProtectedFish = true
                    logWarn("SELL", "Found protected fish, skipping:", item.Name, "["..tier.."]")
                end
            end
        end
    end)
    
    -- Sell if no protected fish
    if not hasProtectedFish then
        if RF_SellAll then
            local ok, res = pcall(function()
                return RF_SellAll:InvokeServer()
            end)
            if ok then
                logInfo("SELL", "‚úÖ Sold fish", manual and "(Manual)" or "(Auto)")
            else
                logError("SELL", "Failed:", tostring(res))
            end
        end
    else
        logInfo("SELL", "Skipped - Protected fish in inventory")
    end
    
    perfEnd("Sell")
end

-- ========== TELEPORT LOCATIONS ==========
local NPCS = {
    ["Rods Here!"] = Vector3.new(146.81, 20.47, 2837.95),
    ["Bobbers"] = Vector3.new(103.67, 17.28, 2867.04),
    ["Skin Crates"] = Vector3.new(78.28, 17.28, 2865.28),
    ["Sell Here!"] = Vector3.new(44.10, 17.28, 2867.51),
    ["Utility Store"] = Vector3.new(-43.83, 20.46, 2874.31),
    ["Traveling Merchant"] = Vector3.new(-128.38, 2.58, 2767.39)
}

local ISLANDS = {
    ["Fisherman Island"] = Vector3.new(122.96, 3.37, 2784.57),
    ["Ancient Jungle"] = Vector3.new(1235.60, 7.97, -123.50),
    ["Lost Isle"] = Vector3.new(-3603.80, -2.66, -1310.98),
    ["Esoteric Depths"] = Vector3.new(2954.65, -1302.73, 1529.24),
    ["Crater Island"] = Vector3.new(993.45, 2.49, 5012.44),
    ["Tropical Grove"] = Vector3.new(-2049.86, 6.27, 3655.13),
    ["Coral Reefs"] = Vector3.new(-2730.52, 4.00, 2174.49),
    ["Kohana Volcano"] = Vector3.new(-598.58, 59.00, 108.43)
}

local function teleportTo(position, name)
    perfStart("Teleport")
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local ok, err = pcall(function()
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
        end)
        if ok then
            logInfo("TELEPORT", "‚úÖ Teleported to:", name)
        else
            logError("TELEPORT", "Failed:", tostring(err))
        end
    end
    perfEnd("Teleport")
end

local function teleportToPlayer(username)
    perfStart("TeleportToPlayer")
    local player = game.Players.LocalPlayer
    local targetPlayer = game.Players:FindFirstChild(username)
    
    if not targetPlayer then
        logError("TELEPORT", "Player not found:", username)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "‚ö†Ô∏è Error",
            Text = "Player '" .. username .. "' not found!",
            Duration = 3
        })
        return
    end
    
    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local ok, err = pcall(function()
                player.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
            end)
            if ok then
                logInfo("TELEPORT", "‚úÖ Teleported to player:", username)
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "‚úÖ Success",
                    Text = "Teleported to " .. username,
                    Duration = 3
                })
            else
                logError("TELEPORT", "Failed:", tostring(err))
            end
        end
    else
        logError("TELEPORT", "Player character not found:", username)
    end
    perfEnd("TeleportToPlayer")
end

-- ========== ANTI-AFK SYSTEM ==========
local function startAntiAFK()
    task.spawn(function()
        while state.antiAFK do
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                -- Small random movement
                local hrp = player.Character.HumanoidRootPart
                local randomOffset = Vector3.new(
                    math.random(-2, 2),
                    0,
                    math.random(-2, 2)
                )
                hrp.CFrame = hrp.CFrame + randomOffset
            end
            task.wait(math.random(45, 90)) -- Every 45-90 seconds
        end
    end)
    logInfo("STABILITY", "‚úÖ Anti-AFK enabled")
end

-- ========== GUI: FISHING TAB ==========
if Tabs["Fishing"] then
    Tabs["Fishing"]:Label("üé£ Auto Fishing System")
    
    pcall(function()
        Tabs["Fishing"]:Toggle({
            Name = "Enable Auto Fishing",
            Default = false,
            Callback = function(v)
                state.autoFishing = v
                logInfo("GUI", "Auto Fishing:", tostring(v))
                if v then startFishing() end
            end
        })
    end)
    
    Tabs["Fishing"]:Label("‚è±Ô∏è Select Timing Mode")
    
    -- Radio buttons for timing modes
    local timingModes = {"Perfect", "Safe", "Human"}
    for _, mode in ipairs(timingModes) do
        pcall(function()
            Tabs["Fishing"]:Toggle({
                Name = "‚óã " .. mode .. " Mode",
                Default = (mode == "Perfect"),
                Callback = function(v)
                    if v then
                        state.catchMode = mode
                        logInfo("GUI", "Timing Mode:", mode)
                        -- Turn off other modes (simulate radio button)
                        for _, otherMode in ipairs(timingModes) do
                            if otherMode ~= mode then
                                -- Visual update would happen here in real implementation
                            end
                        end
                    end
                end
            })
        end)
    end
end

-- ========== GUI: SELLING TAB ==========
if Tabs["Selling"] then
    Tabs["Selling"]:Label("üí∞ Smart Selling System")
    
    Tabs["Selling"]:Label("üõ°Ô∏è Filter Fish (Don't Sell)")
    
    -- Checkbox for each tier
    local tiers = {"Secret", "Mythic", "Legendary", "Epic", "Rare"}
    for _, tier in ipairs(tiers) do
        pcall(function()
            Tabs["Selling"]:Toggle({
                Name = "‚òê " .. tier,
                Default = false,
                Callback = function(v)
                    state.filterRare[tier] = v
                    logInfo("GUI", tier .. " Filter:", tostring(v))
                end
            })
        end)
    end
    
    Tabs["Selling"]:Label("üíµ Selling Actions")
    
    pcall(function()
        Tabs["Selling"]:Button({
            Name = "üíµ Manual Sell (Safe)",
            Callback = function()
                sellFish(true)
            end
        })
    end)
    
    pcall(function()
        Tabs["Selling"]:Toggle({
            Name = "Auto Sell Every 30s",
            Default = false,
            Callback = function(v)
                state.autoSell = v
                logInfo("GUI", "Auto Sell:", tostring(v))
                if v then
                    task.spawn(function()
                        while state.autoSell do
                            task.wait(30)
                            if state.autoSell then
                                sellFish(false)
                            end
                        end
                    end)
                end
            end
        })
    end)
end

-- ========== GUI: TRAVEL TAB ==========
if Tabs["Travel"] then
    Tabs["Travel"]:Label("üè™ Fishing Merchant")
    for name, pos in pairs(NPCS) do
        pcall(function()
            Tabs["Travel"]:Button({
                Name = "‚Üí " .. name,
                Callback = function()
                    teleportTo(pos, name)
                end
            })
        end)
    end
    
    Tabs["Travel"]:Label("üó∫Ô∏è Island Teleports")
    for name, pos in pairs(ISLANDS) do
        pcall(function()
            Tabs["Travel"]:Button({
                Name = "üèùÔ∏è " .. name,
                Callback = function()
                    teleportTo(pos, name)
                end
            })
        end)
    end
    
    Tabs["Travel"]:Label("üë§ NPC Player In-Game")
    pcall(function()
        Tabs["Travel"]:Textbox({
            Name = "Enter Player Username",
            Default = "",
            Placeholder = "Username...",
            Callback = function(username)
                if username and username ~= "" then
                    teleportToPlayer(username)
                end
            end
        })
    end)
end

-- ========== GUI: STABILITY TAB ==========
if Tabs["Stability"] then
    Tabs["Stability"]:Label("üß† Stability & Safety")
    
    pcall(function()
        Tabs["Stability"]:Toggle({
            Name = "Anti-AFK Protection",
            Default = false,
            Callback = function(v)
                state.antiAFK = v
                if v then startAntiAFK() end
            end
        })
    end)
    
    pcall(function()
        Tabs["Stability"]:Button({
            Name = "üîÑ Restart Fishing",
            Callback = function()
                state.autoFishing = false
                task.wait(1)
                state.autoFishing = true
                startFishing()
                logInfo("STABILITY", "Fishing restarted")
            end
        })
    end)
    
    pcall(function()
        Tabs["Stability"]:Button({
            Name = "‚õî Emergency Stop All",
            Callback = function()
                state.autoFishing = false
                state.autoSell = false
                state.antiAFK = false
                logWarn("STABILITY", "üö® ALL SYSTEMS STOPPED")
            end
        })
    end)
end

-- ‚úÖ Initialization Complete
logInfo("INIT", "‚úÖ‚úÖ‚úÖ FishItHub v4.0 Ultimate LOADED ‚úÖ‚úÖ‚úÖ")
logInfo("INIT", "All systems ready! Happy fishing! üé£")

-- END OF SCRIPT
